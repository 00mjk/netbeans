/* The following code was generated by JFlex 1.4.3 on 19/06/22 13:23 */

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.netbeans.modules.php.editor.lexer;

import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;
import org.netbeans.modules.web.common.api.ByteStack;

@org.netbeans.api.annotations.common.SuppressWarnings({"SF_SWITCH_FALLTHROUGH", "URF_UNREAD_FIELD", "DLS_DEAD_LOCAL_STORE", "DM_DEFAULT_ENCODING", "EI_EXPOSE_REP"})

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 19/06/22 13:23 from the specification file
 * <tt>/home/junichi11/NetBeansProjects/netbeans/php/php.editor/tools/Php5ColoringScanner.flex</tt>
 */
public class PHP5ColoringLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = LexerInput.EOF;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_PHP_END_NOWDOC = 22;
  public static final int ST_PHP_NOWDOC = 18;
  public static final int ST_PHP_END_HEREDOC = 16;
  public static final int ST_PHP_COMMENT = 32;
  public static final int ST_PHP_START_HEREDOC = 14;
  public static final int ST_PHP_QUOTES_AFTER_VARIABLE = 8;
  public static final int ST_PHP_IN_SCRIPTING = 2;
  public static final int ST_PHP_LOOKING_FOR_CONSTANT_NAME = 28;
  public static final int ST_PHP_LOOKING_FOR_STATIC_PROPERTY = 10;
  public static final int ST_PHP_DOC_COMMENT = 34;
  public static final int ST_PHP_LINE_COMMENT = 36;
  public static final int ST_PHP_LOOKING_FOR_FUNCTION_NAME = 26;
  public static final int ST_PHP_BACKQUOTE = 6;
  public static final int ST_PHP_START_NOWDOC = 20;
  public static final int ST_PHP_HEREDOC = 12;
  public static final int ST_HALTED_COMPILER = 40;
  public static final int ST_PHP_HIGHLIGHTING_ERROR = 38;
  public static final int ST_PHP_VAR_OFFSET = 30;
  public static final int YYINITIAL = 0;
  public static final int ST_PHP_DOUBLE_QUOTES = 4;
  public static final int ST_PHP_LOOKING_FOR_PROPERTY = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15,
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\17\1\16\2\0\1\22\22\0\1\17\1\33\1\24\1\122"+
    "\1\23\1\37\1\40\1\105\1\106\1\72\1\35\1\32\1\107\1\5"+
    "\1\3\1\36\1\6\1\12\10\1\1\114\1\21\1\34\1\30\1\31"+
    "\1\44\1\43\1\47\1\11\1\75\1\51\1\4\1\10\1\102\1\104"+
    "\1\76\1\116\1\113\1\101\1\111\1\50\1\45\1\77\1\117\1\46"+
    "\1\74\1\100\1\103\1\115\1\112\1\7\1\110\1\14\1\121\1\25"+
    "\1\20\1\42\1\2\1\26\1\60\1\64\1\71\1\66\1\67\1\55"+
    "\1\63\1\104\1\52\1\70\1\113\1\56\1\111\1\53\1\57\1\73"+
    "\1\117\1\62\1\61\1\54\1\103\1\65\1\112\1\7\1\110\1\14"+
    "\1\27\1\41\1\120\1\43\53\14\1\14\12\14\1\14\4\14\1\14"+
    "\5\14\27\14\1\14\37\14\1\14\10\14\u01c2\13\4\0\14\13\16\0"+
    "\5\13\7\0\1\13\1\0\1\13\201\0\5\13\1\0\2\13\2\0"+
    "\4\13\10\0\1\13\1\0\3\13\1\0\1\13\1\0\24\13\1\0"+
    "\123\13\1\0\213\13\10\0\236\13\11\0\46\13\2\0\1\13\7\0"+
    "\47\13\110\0\33\13\5\0\3\13\55\0\53\13\25\0\12\15\4\0"+
    "\2\13\1\0\143\13\1\0\1\13\17\0\2\13\7\0\2\13\12\15"+
    "\3\13\2\0\1\13\20\0\1\13\1\0\36\13\35\0\131\13\13\0"+
    "\1\13\16\0\12\15\41\13\11\0\2\13\4\0\1\13\5\0\26\13"+
    "\4\0\1\13\11\0\1\13\3\0\1\13\27\0\31\13\107\0\1\13"+
    "\1\0\13\13\127\0\66\13\3\0\1\13\22\0\1\13\7\0\12\13"+
    "\4\0\12\15\1\0\7\13\1\0\7\13\5\0\10\13\2\0\2\13"+
    "\2\0\26\13\1\0\7\13\1\0\1\13\3\0\4\13\3\0\1\13"+
    "\20\0\1\13\15\0\2\13\1\0\3\13\4\0\12\15\2\13\23\0"+
    "\6\13\4\0\2\13\2\0\26\13\1\0\7\13\1\0\2\13\1\0"+
    "\2\13\1\0\2\13\37\0\4\13\1\0\1\13\7\0\12\15\2\0"+
    "\3\13\20\0\11\13\1\0\3\13\1\0\26\13\1\0\7\13\1\0"+
    "\2\13\1\0\5\13\3\0\1\13\22\0\1\13\17\0\2\13\4\0"+
    "\12\15\25\0\10\13\2\0\2\13\2\0\26\13\1\0\7\13\1\0"+
    "\2\13\1\0\5\13\3\0\1\13\36\0\2\13\1\0\3\13\4\0"+
    "\12\15\1\0\1\13\21\0\1\13\1\0\6\13\3\0\3\13\1\0"+
    "\4\13\3\0\2\13\1\0\1\13\1\0\2\13\3\0\2\13\3\0"+
    "\3\13\3\0\14\13\26\0\1\13\25\0\12\15\25\0\10\13\1\0"+
    "\3\13\1\0\27\13\1\0\12\13\1\0\5\13\3\0\1\13\32\0"+
    "\2\13\6\0\2\13\4\0\12\15\25\0\10\13\1\0\3\13\1\0"+
    "\27\13\1\0\12\13\1\0\5\13\3\0\1\13\40\0\1\13\1\0"+
    "\2\13\4\0\12\15\1\0\2\13\22\0\10\13\1\0\3\13\1\0"+
    "\51\13\2\0\1\13\20\0\1\13\21\0\2\13\4\0\12\15\12\0"+
    "\6\13\5\0\22\13\3\0\30\13\1\0\11\13\1\0\1\13\2\0"+
    "\7\13\72\0\60\13\1\0\2\13\14\0\7\13\11\0\12\15\47\0"+
    "\2\13\1\0\1\13\2\0\2\13\1\0\1\13\2\0\1\13\6\0"+
    "\4\13\1\0\7\13\1\0\3\13\1\0\1\13\1\0\1\13\2\0"+
    "\2\13\1\0\4\13\1\0\2\13\11\0\1\13\2\0\5\13\1\0"+
    "\1\13\11\0\12\15\2\0\4\13\40\0\1\13\37\0\12\15\26\0"+
    "\10\13\1\0\44\13\33\0\5\13\163\0\53\13\24\0\1\13\12\15"+
    "\6\0\6\13\4\0\4\13\3\0\1\13\3\0\2\13\7\0\3\13"+
    "\4\0\15\13\14\0\1\13\1\0\12\15\6\0\46\13\1\0\1\13"+
    "\5\0\1\13\2\0\53\13\1\0\u014d\13\1\0\4\13\2\0\7\13"+
    "\1\0\1\13\1\0\4\13\2\0\51\13\1\0\4\13\2\0\41\13"+
    "\1\0\4\13\2\0\7\13\1\0\1\13\1\0\4\13\2\0\17\13"+
    "\1\0\71\13\1\0\4\13\2\0\103\13\45\0\20\13\20\0\125\13"+
    "\14\0\u026c\13\2\0\21\13\1\0\32\13\5\0\113\13\25\0\15\13"+
    "\1\0\4\13\16\0\22\13\16\0\22\13\16\0\15\13\1\0\3\13"+
    "\17\0\64\13\43\0\1\13\4\0\1\13\3\0\12\15\46\0\12\15"+
    "\6\0\130\13\10\0\51\13\1\0\1\13\5\0\106\13\12\0\35\13"+
    "\51\0\12\15\36\13\2\0\5\13\13\0\54\13\25\0\7\13\10\0"+
    "\12\15\46\0\27\13\11\0\65\13\53\0\12\15\6\0\12\15\15\0"+
    "\1\13\135\0\57\13\21\0\7\13\4\0\12\15\51\0\36\13\15\0"+
    "\2\13\12\15\54\13\32\0\44\13\34\0\12\15\3\0\3\13\12\15"+
    "\44\13\153\0\4\13\1\0\4\13\3\0\2\13\11\0\300\13\100\0"+
    "\u0116\13\2\0\6\13\2\0\46\13\2\0\6\13\2\0\10\13\1\0"+
    "\1\13\1\0\1\13\1\0\1\13\1\0\37\13\2\0\65\13\1\0"+
    "\7\13\1\0\1\13\3\0\3\13\1\0\7\13\3\0\4\13\2\0"+
    "\6\13\4\0\15\13\5\0\3\13\1\0\7\13\164\0\1\13\15\0"+
    "\1\13\20\0\15\13\145\0\1\13\4\0\1\13\2\0\12\13\1\0"+
    "\1\13\3\0\5\13\6\0\1\13\1\0\1\13\1\0\1\13\1\0"+
    "\4\13\1\0\13\13\2\0\4\13\5\0\5\13\4\0\1\13\64\0"+
    "\2\13\u0a7b\0\57\13\1\0\57\13\1\0\205\13\6\0\4\13\3\0"+
    "\2\13\14\0\46\13\1\0\1\13\5\0\1\13\2\0\70\13\7\0"+
    "\1\13\20\0\27\13\11\0\7\13\1\0\7\13\1\0\7\13\1\0"+
    "\7\13\1\0\7\13\1\0\7\13\1\0\7\13\1\0\7\13\120\0"+
    "\1\13\u01d5\0\2\13\52\0\5\13\5\0\2\13\4\0\126\13\6\0"+
    "\3\13\1\0\132\13\1\0\4\13\5\0\51\13\3\0\136\13\21\0"+
    "\33\13\65\0\20\13\u0200\0\u19b6\13\112\0\u51cd\13\63\0\u048d\13\103\0"+
    "\56\13\2\0\u010d\13\3\0\20\13\12\15\2\13\24\0\57\13\20\0"+
    "\31\13\10\0\106\13\61\0\11\13\2\0\147\13\2\0\4\13\1\0"+
    "\4\13\14\0\13\13\115\0\12\13\1\0\3\13\1\0\4\13\1\0"+
    "\27\13\35\0\64\13\16\0\62\13\34\0\12\15\30\0\6\13\3\0"+
    "\1\13\4\0\12\15\34\13\12\0\27\13\31\0\35\13\7\0\57\13"+
    "\34\0\1\13\12\15\46\0\51\13\27\0\3\13\1\0\10\13\4\0"+
    "\12\15\6\0\27\13\3\0\1\13\5\0\60\13\1\0\1\13\3\0"+
    "\2\13\2\0\5\13\2\0\1\13\1\0\1\13\30\0\3\13\2\0"+
    "\13\13\7\0\3\13\14\0\6\13\2\0\6\13\2\0\6\13\11\0"+
    "\7\13\1\0\7\13\221\0\43\13\15\0\12\15\6\0\u2ba4\13\14\0"+
    "\27\13\4\0\61\13\u2104\0\u016e\13\2\0\152\13\46\0\7\13\14\0"+
    "\5\13\5\0\1\13\1\0\12\13\1\0\15\13\1\0\5\13\1\0"+
    "\1\13\1\0\2\13\1\0\2\13\1\0\154\13\41\0\u016b\13\22\0"+
    "\100\13\2\0\66\13\50\0\14\13\164\0\5\13\1\0\207\13\23\0"+
    "\12\15\7\0\32\13\6\0\32\13\13\0\131\13\3\0\6\13\2\0"+
    "\6\13\2\0\6\13\2\0\3\13\43\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\25\0\2\1\1\2\1\3\1\4\1\5\1\4\1\6"+
    "\1\3\4\4\1\7\1\5\1\10\1\5\1\11\1\12"+
    "\1\13\1\14\14\6\1\5\23\4\1\2\1\5\1\15"+
    "\2\4\1\5\1\4\1\16\1\17\1\20\1\21\1\22"+
    "\2\21\1\20\3\21\3\23\1\24\1\23\3\25\1\21"+
    "\1\2\1\21\1\26\1\27\1\26\1\30\1\2\1\31"+
    "\1\2\2\31\3\32\1\33\1\0\2\2\1\34\1\35"+
    "\1\34\1\36\2\37\1\3\1\40\1\3\1\41\1\40"+
    "\1\42\4\0\4\43\2\44\1\45\1\46\1\47\1\0"+
    "\1\50\1\51\2\0\1\3\1\0\1\4\1\3\1\0"+
    "\6\4\1\52\2\0\4\4\1\0\1\4\1\0\1\53"+
    "\2\0\1\21\2\0\2\6\1\0\1\54\1\55\1\56"+
    "\1\57\4\4\1\60\4\4\1\61\1\4\1\62\33\4"+
    "\13\0\2\4\1\63\3\0\2\64\2\65\1\66\1\67"+
    "\1\65\3\0\1\64\2\65\1\70\1\71\3\0\1\72"+
    "\1\0\1\27\1\0\1\30\3\0\1\73\1\0\1\31"+
    "\2\74\1\0\1\33\1\0\1\75\2\0\1\76\1\0"+
    "\1\64\1\0\1\77\1\0\1\100\1\101\1\43\1\102"+
    "\1\103\2\0\10\4\1\0\7\4\2\3\1\104\3\4"+
    "\1\0\1\4\3\0\4\4\1\105\4\4\1\106\3\4"+
    "\1\107\5\4\1\110\13\4\1\111\14\4\1\112\12\0"+
    "\2\4\3\113\1\114\1\0\1\115\1\0\1\72\1\73"+
    "\1\116\1\117\1\43\2\0\11\4\1\120\6\4\1\121"+
    "\1\122\1\123\6\4\4\0\1\124\5\4\1\125\11\4"+
    "\1\126\2\4\1\127\1\4\1\130\3\4\1\131\1\4"+
    "\1\132\1\133\4\4\1\134\10\4\12\0\2\4\1\114"+
    "\1\43\1\135\1\0\14\4\1\136\3\4\1\137\1\4"+
    "\1\140\1\141\1\4\1\142\2\143\3\0\3\4\1\144"+
    "\10\4\1\145\1\4\1\146\1\147\1\150\6\4\1\151"+
    "\1\152\1\4\1\153\1\154\1\4\1\155\3\4\1\156"+
    "\10\0\1\157\1\0\1\160\1\161\1\43\1\0\12\4"+
    "\1\162\3\4\1\163\3\4\3\0\1\164\13\4\1\165"+
    "\1\166\1\167\1\170\1\171\4\4\1\172\1\173\5\0"+
    "\1\43\1\1\3\4\1\174\5\4\1\175\4\4\1\176"+
    "\1\177\1\4\2\200\1\0\1\201\2\4\1\202\1\203"+
    "\3\4\1\204\5\4\1\205\3\0\1\43\1\0\1\206"+
    "\3\4\1\207\6\4\1\210\1\211\1\0\1\4\1\212"+
    "\5\4\1\213\1\4\1\214\1\215\1\4\1\0\1\43"+
    "\1\0\2\4\1\216\1\217\4\4\1\220\1\47\1\4"+
    "\1\221\1\222\1\223\3\4\1\224\1\0\1\43\1\0"+
    "\3\4\1\225\1\226\1\227\1\4\1\230\1\4\1\231"+
    "\1\232\1\43\1\0\5\4\1\0\1\233\2\4\1\234"+
    "\1\235\1\0\1\236\1\4\1\0\1\4\1\0\1\237"+
    "\14\0\1\240\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[735];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\123\0\246\0\371\0\u014c\0\u019f\0\u01f2\0\u0245"+
    "\0\u0298\0\u02eb\0\u033e\0\u0391\0\u03e4\0\u0437\0\u048a\0\u04dd"+
    "\0\u0530\0\u0583\0\u05d6\0\u0629\0\u067c\0\u06cf\0\u0722\0\u0775"+
    "\0\u07c8\0\u081b\0\u086e\0\u08c1\0\u0914\0\u0967\0\u09ba\0\u0a0d"+
    "\0\u0a60\0\u0ab3\0\u0b06\0\u0775\0\u0775\0\u0b59\0\u0bac\0\u0775"+
    "\0\u0775\0\u0775\0\u0bff\0\u0c52\0\u0ca5\0\u0cf8\0\u0d4b\0\u0d9e"+
    "\0\u0df1\0\u0e44\0\u0e97\0\u0eea\0\u0f3d\0\u0775\0\u0f90\0\u0fe3"+
    "\0\u1036\0\u1089\0\u10dc\0\u112f\0\u1182\0\u11d5\0\u1228\0\u127b"+
    "\0\u12ce\0\u1321\0\u1374\0\u13c7\0\u141a\0\u146d\0\u14c0\0\u1513"+
    "\0\u1566\0\u15b9\0\u160c\0\u165f\0\u0775\0\u16b2\0\u1705\0\u1758"+
    "\0\u17ab\0\u0775\0\u0775\0\u17fe\0\u1851\0\u0775\0\u18a4\0\u18f7"+
    "\0\u194a\0\u199d\0\u19f0\0\u1a43\0\u0775\0\u1a96\0\u1ae9\0\u1b3c"+
    "\0\u1b8f\0\u1be2\0\u1c35\0\u1c88\0\u1cdb\0\u1d2e\0\u1ae9\0\u0775"+
    "\0\u1d81\0\u1dd4\0\u1e27\0\u1e7a\0\u1ecd\0\u1f20\0\u1f73\0\u1fc6"+
    "\0\u0775\0\u2019\0\u206c\0\u20bf\0\u2112\0\u2165\0\u2112\0\u0775"+
    "\0\u21b8\0\u220b\0\u0775\0\u0775\0\u225e\0\u22b1\0\u0775\0\u2304"+
    "\0\u0775\0\u2357\0\u0775\0\u23aa\0\u23fd\0\u2450\0\u24a3\0\u24f6"+
    "\0\u0775\0\u2549\0\u259c\0\u25ef\0\u2642\0\u0775\0\u2695\0\u067c"+
    "\0\u26e8\0\u273b\0\u278e\0\u27e1\0\u2834\0\u2887\0\u28da\0\u292d"+
    "\0\u2980\0\u29d3\0\u2a26\0\u2a79\0\u2acc\0\u2b1f\0\u2b72\0\u2bc5"+
    "\0\u0775\0\u2c18\0\u2c6b\0\u2cbe\0\u2d11\0\u2d64\0\u2db7\0\u2e0a"+
    "\0\u2e5d\0\u160c\0\u2eb0\0\u0bac\0\u2f03\0\u0775\0\u2f56\0\u2fa9"+
    "\0\u2ffc\0\u304f\0\u30a2\0\u30f5\0\u3148\0\u319b\0\u0ab3\0\u31ee"+
    "\0\u3241\0\u3294\0\u32e7\0\u0ab3\0\u333a\0\u338d\0\u33e0\0\u3433"+
    "\0\u0ab3\0\u3486\0\u0ab3\0\u34d9\0\u352c\0\u357f\0\u35d2\0\u3625"+
    "\0\u3678\0\u36cb\0\u371e\0\u3771\0\u37c4\0\u3817\0\u386a\0\u38bd"+
    "\0\u3910\0\u3963\0\u39b6\0\u3a09\0\u3a5c\0\u3aaf\0\u3b02\0\u3b55"+
    "\0\u3ba8\0\u3bfb\0\u3c4e\0\u3ca1\0\u3cf4\0\u3d47\0\u3d9a\0\u3ded"+
    "\0\u3e40\0\u165f\0\u3e93\0\u3ee6\0\u3f39\0\u3f8c\0\u3fdf\0\u4032"+
    "\0\u4085\0\u40d8\0\u412b\0\u0775\0\u417e\0\u18a4\0\u41d1\0\u4224"+
    "\0\u4277\0\u417e\0\u0775\0\u0775\0\u0775\0\u41d1\0\u42ca\0\u19f0"+
    "\0\u431d\0\u4370\0\u42ca\0\u431d\0\u0775\0\u0775\0\u43c3\0\u4416"+
    "\0\u4469\0\u44bc\0\u450f\0\u0775\0\u1dd4\0\u0775\0\u1e7a\0\u1f20"+
    "\0\u1ecd\0\u4562\0\u45b5\0\u4608\0\u2019\0\u0775\0\u206c\0\u0775"+
    "\0\u2165\0\u0775\0\u225e\0\u465b\0\u0775\0\u46ae\0\u4701\0\u4754"+
    "\0\u0775\0\u47a7\0\u0775\0\u0775\0\u47fa\0\u484d\0\u0775\0\u48a0"+
    "\0\u48f3\0\u4946\0\u4999\0\u49ec\0\u4a3f\0\u4a92\0\u4ae5\0\u4b38"+
    "\0\u4b8b\0\u4bde\0\u4c31\0\u4c84\0\u4cd7\0\u4d2a\0\u4d7d\0\u4dd0"+
    "\0\u4e23\0\u4e76\0\u4ec9\0\u4f1c\0\u4f6f\0\u4fc2\0\u5015\0\u5068"+
    "\0\u50bb\0\u510e\0\u5161\0\u51b4\0\u5207\0\u525a\0\u52ad\0\u5300"+
    "\0\u0ab3\0\u5353\0\u53a6\0\u53f9\0\u544c\0\u0ab3\0\u549f\0\u54f2"+
    "\0\u5545\0\u549f\0\u5598\0\u55eb\0\u563e\0\u5691\0\u56e4\0\u0ab3"+
    "\0\u5737\0\u578a\0\u57dd\0\u5830\0\u5883\0\u58d6\0\u5929\0\u597c"+
    "\0\u59cf\0\u5a22\0\u5a75\0\u0ab3\0\u5ac8\0\u5b1b\0\u5b6e\0\u5bc1"+
    "\0\u5c14\0\u5c67\0\u5cba\0\u5d0d\0\u5d60\0\u5db3\0\u5e06\0\u5e59"+
    "\0\u0ab3\0\u5eac\0\u5eff\0\u5f52\0\u5fa5\0\u5ff8\0\u604b\0\u609e"+
    "\0\u60f1\0\u6144\0\u6197\0\u61ea\0\u623d\0\u0775\0\u17fe\0\u194a"+
    "\0\u6290\0\u62e3\0\u0775\0\u6336\0\u0775\0\u0775\0\u0775\0\u0775"+
    "\0\u6389\0\u63dc\0\u642f\0\u6482\0\u64d5\0\u6528\0\u657b\0\u65ce"+
    "\0\u6621\0\u6674\0\u66c7\0\u671a\0\u0ab3\0\u676d\0\u67c0\0\u6813"+
    "\0\u6866\0\u68b9\0\u690c\0\u695f\0\u0ab3\0\u0ab3\0\u69b2\0\u6a05"+
    "\0\u6a58\0\u6aab\0\u6afe\0\u6b51\0\u6ba4\0\u6bf7\0\u6c4a\0\u6c9d"+
    "\0\u51b4\0\u6cf0\0\u6d43\0\u6d96\0\u6de9\0\u6e3c\0\u0ab3\0\u6e8f"+
    "\0\u6ee2\0\u6f35\0\u6f88\0\u6fdb\0\u702e\0\u7081\0\u70d4\0\u7127"+
    "\0\u0ab3\0\u717a\0\u71cd\0\u0ab3\0\u7220\0\u0ab3\0\u7273\0\u72c6"+
    "\0\u7319\0\u0ab3\0\u736c\0\u0ab3\0\u0ab3\0\u73bf\0\u7412\0\u7465"+
    "\0\u74b8\0\u0ab3\0\u750b\0\u755e\0\u75b1\0\u7604\0\u7657\0\u76aa"+
    "\0\u76fd\0\u7750\0\u77a3\0\u77f6\0\u7849\0\u789c\0\u78ef\0\u7942"+
    "\0\u7995\0\u79e8\0\u7a3b\0\u7a8e\0\u7ae1\0\u7b34\0\u0775\0\u7b87"+
    "\0\u0775\0\u7bda\0\u7c2d\0\u7c80\0\u7cd3\0\u7d26\0\u7d79\0\u7dcc"+
    "\0\u7e1f\0\u7e72\0\u7ec5\0\u7f18\0\u7f6b\0\u7fbe\0\u0ab3\0\u8011"+
    "\0\u8064\0\u80b7\0\u0ab3\0\u810a\0\u0ab3\0\u815d\0\u81b0\0\u0ab3"+
    "\0\u0775\0\u8203\0\u8256\0\u82a9\0\u82fc\0\u834f\0\u83a2\0\u83f5"+
    "\0\u0ab3\0\u8448\0\u849b\0\u84ee\0\u8541\0\u8594\0\u85e7\0\u863a"+
    "\0\u868d\0\u0ab3\0\u86e0\0\u0ab3\0\u0ab3\0\u0ab3\0\u8733\0\u8786"+
    "\0\u87d9\0\u882c\0\u887f\0\u88d2\0\u0ab3\0\u0ab3\0\u8925\0\u0ab3"+
    "\0\u0ab3\0\u8978\0\u0ab3\0\u89cb\0\u8a1e\0\u8a71\0\u0ab3\0\u8ac4"+
    "\0\u8b17\0\u8b6a\0\u8bbd\0\u8c10\0\u8c63\0\u8cb6\0\u8d09\0\u0775"+
    "\0\u8d5c\0\u8daf\0\u0ab3\0\u8e02\0\u8e55\0\u8ea8\0\u8efb\0\u8f4e"+
    "\0\u8fa1\0\u8ff4\0\u9047\0\u909a\0\u90ed\0\u9140\0\u9193\0\u91e6"+
    "\0\u9239\0\u928c\0\u92df\0\u0ab3\0\u9332\0\u9385\0\u93d8\0\u942b"+
    "\0\u947e\0\u94d1\0\u0ab3\0\u9524\0\u9577\0\u95ca\0\u961d\0\u9670"+
    "\0\u96c3\0\u9716\0\u9769\0\u97bc\0\u980f\0\u9862\0\u0ab3\0\u0ab3"+
    "\0\u0ab3\0\u0ab3\0\u0ab3\0\u98b5\0\u9908\0\u995b\0\u99ae\0\u0ab3"+
    "\0\u0ab3\0\u9a01\0\u9a54\0\u9aa7\0\u9afa\0\u9b4d\0\u9ba0\0\u9bf3"+
    "\0\u9c46\0\u9c99\0\u9cec\0\u0ab3\0\u9d3f\0\u9d92\0\u9de5\0\u9e38"+
    "\0\u9e8b\0\u0ab3\0\u9ede\0\u9f31\0\u9f84\0\u9fd7\0\u0ab3\0\u0ab3"+
    "\0\ua02a\0\u0775\0\ua07d\0\ua0d0\0\ua123\0\ua176\0\ua1c9\0\u0ab3"+
    "\0\u0ab3\0\ua21c\0\ua26f\0\ua2c2\0\ua315\0\ua368\0\ua3bb\0\ua40e"+
    "\0\ua461\0\ua4b4\0\u0ab3\0\ua507\0\ua55a\0\ua5ad\0\ua600\0\ua653"+
    "\0\u0ab3\0\ua6a6\0\ua6f9\0\ua74c\0\u0ab3\0\ua79f\0\ua7f2\0\ua845"+
    "\0\ua898\0\ua8eb\0\ua93e\0\u0ab3\0\u0ab3\0\ua991\0\ua9e4\0\u0ab3"+
    "\0\uaa37\0\uaa8a\0\uaadd\0\uab30\0\uab83\0\u0ab3\0\uabd6\0\u0ab3"+
    "\0\u0ab3\0\uac29\0\uac7c\0\uaccf\0\uad22\0\uad75\0\uadc8\0\u0ab3"+
    "\0\u0ab3\0\uae1b\0\uae6e\0\uaec1\0\uaf14\0\u0ab3\0\uaf67\0\uafba"+
    "\0\u0ab3\0\u0ab3\0\u0ab3\0\ub00d\0\ub060\0\ub0b3\0\u0ab3\0\ub106"+
    "\0\ub159\0\ub1ac\0\ub1ff\0\ub252\0\ub2a5\0\u0ab3\0\u0ab3\0\u0ab3"+
    "\0\ub2f8\0\u0ab3\0\ub34b\0\u0ab3\0\u0775\0\uaf67\0\ub39e\0\ub3f1"+
    "\0\ub444\0\ub497\0\ub4ea\0\ub53d\0\ub590\0\u0ab3\0\ub5e3\0\ub636"+
    "\0\u0ab3\0\u0ab3\0\ub689\0\u0ab3\0\ub6dc\0\ub72f\0\ub782\0\ub7d5"+
    "\0\u0ab3\0\ub828\0\ub87b\0\ub8ce\0\ub921\0\ub974\0\ub9c7\0\uba1a"+
    "\0\uba6d\0\ubac0\0\ubb13\0\ubb66\0\ubbb9\0\u0775\0\ubc0c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[735];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\34\26\1\27\66\26\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\31\2\42\1\30"+
    "\2\43\1\44\1\45\1\43\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\73\1\76\1\77\1\100"+
    "\1\101\1\72\1\102\1\71\1\103\1\104\1\105\1\74"+
    "\1\34\1\42\1\106\1\44\1\107\1\110\1\106\1\111"+
    "\1\107\1\76\1\100\1\103\1\112\1\42\1\113\1\114"+
    "\1\115\1\116\1\42\1\117\1\42\1\120\1\121\2\42"+
    "\1\122\1\44\1\123\23\124\1\125\1\126\1\127\1\124"+
    "\1\130\73\124\23\131\1\132\1\131\1\133\1\126\1\134"+
    "\73\131\5\135\1\136\21\135\1\137\75\135\1\140\1\135"+
    "\1\140\2\135\3\140\1\135\2\140\1\135\2\43\2\135"+
    "\1\43\22\135\25\140\1\135\12\140\3\135\4\140\1\141"+
    "\3\140\3\135\16\142\1\143\3\142\1\144\1\145\1\142"+
    "\1\146\1\142\1\147\73\142\2\150\1\151\1\150\1\151"+
    "\2\150\3\151\1\150\2\151\2\150\1\152\25\150\25\151"+
    "\1\150\12\151\3\150\4\151\1\150\3\151\3\150\2\30"+
    "\1\153\1\30\1\153\2\30\3\153\1\30\2\153\1\30"+
    "\1\0\1\154\25\30\25\153\1\30\12\153\3\30\4\153"+
    "\1\30\3\153\3\30\2\155\1\156\1\155\1\156\2\155"+
    "\3\156\2\155\1\156\1\155\1\157\3\155\1\160\22\155"+
    "\25\156\1\155\12\156\3\155\4\156\1\155\3\156\3\155"+
    "\2\161\1\162\1\161\1\162\2\161\3\162\1\161\2\162"+
    "\2\161\1\163\25\161\25\162\1\161\12\162\3\161\4\162"+
    "\1\161\3\162\3\161\2\30\1\164\1\30\1\164\2\30"+
    "\3\164\1\30\2\164\1\30\1\165\1\166\2\30\1\167"+
    "\22\30\25\164\1\30\12\164\3\30\4\164\1\30\3\164"+
    "\3\30\2\170\1\171\1\170\1\171\1\172\1\170\3\171"+
    "\1\170\2\171\1\170\2\43\2\170\1\43\22\170\25\171"+
    "\1\170\12\171\3\170\4\171\1\170\3\171\5\170\1\171"+
    "\1\170\1\171\2\170\3\171\1\170\2\171\1\170\2\43"+
    "\2\170\1\43\22\170\25\171\1\170\12\171\1\170\1\173"+
    "\1\170\4\171\1\170\3\171\3\170\2\174\1\175\1\174"+
    "\1\175\2\174\3\175\1\174\2\175\1\174\2\43\2\174"+
    "\1\43\22\174\25\175\1\174\12\175\3\174\4\175\1\174"+
    "\3\175\3\174\1\30\1\176\1\42\1\177\1\42\1\30"+
    "\1\200\3\42\1\176\2\42\1\30\2\201\1\173\1\177"+
    "\1\201\1\202\1\177\1\201\2\177\6\30\1\177\5\30"+
    "\1\177\25\42\1\177\12\42\1\201\2\177\4\42\1\177"+
    "\3\42\1\177\1\203\1\201\35\204\1\205\65\204\35\206"+
    "\1\207\65\206\16\210\1\211\3\210\1\212\11\210\1\213"+
    "\2\210\1\214\4\210\1\215\56\210\16\216\2\217\2\216"+
    "\1\217\100\216\123\220\34\26\1\221\122\26\1\0\2\26"+
    "\1\222\4\26\1\223\5\26\1\0\1\26\1\0\4\26"+
    "\1\224\1\0\6\26\3\0\12\26\1\0\14\26\124\0"+
    "\1\31\1\225\1\226\1\227\1\0\1\31\3\0\1\31"+
    "\54\0\1\227\34\0\1\42\1\230\1\0\1\42\1\0"+
    "\10\42\27\0\25\42\1\0\12\42\3\0\4\42\1\0"+
    "\3\42\4\0\1\231\1\0\1\232\2\0\1\231\3\0"+
    "\1\231\15\0\1\66\73\0\2\42\1\0\1\42\1\0"+
    "\1\42\1\233\6\42\27\0\3\42\1\234\2\42\1\234"+
    "\2\42\1\235\6\42\1\236\3\42\1\237\1\0\2\42"+
    "\1\237\3\42\1\235\3\42\3\0\1\42\1\240\2\42"+
    "\1\0\1\236\2\42\10\0\1\66\22\0\1\66\1\241"+
    "\72\0\1\31\1\225\1\226\1\227\1\0\1\31\1\242"+
    "\1\0\1\243\1\31\51\0\1\243\2\0\1\227\34\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\1\70\11\42"+
    "\1\70\12\42\1\0\12\42\3\0\4\42\1\0\3\42"+
    "\4\0\2\42\1\0\1\42\1\0\10\42\27\0\1\244"+
    "\1\42\1\245\2\42\1\246\4\42\1\244\1\245\11\42"+
    "\1\0\3\42\1\246\4\42\1\247\1\42\3\0\4\42"+
    "\1\0\3\42\4\0\2\42\1\0\1\42\1\0\10\42"+
    "\6\0\1\47\7\0\1\250\10\0\1\42\1\251\13\42"+
    "\1\251\7\42\1\0\12\42\1\252\2\0\4\42\1\0"+
    "\3\42\4\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\25\42\1\0\12\42\3\0\4\42\1\0\3\42\21\0"+
    "\2\43\2\0\1\43\102\0\1\253\1\0\1\253\2\0"+
    "\3\253\1\0\2\253\30\0\25\253\1\0\12\253\3\0"+
    "\4\253\1\0\3\253\3\0\23\254\1\255\1\256\1\257"+
    "\1\254\1\260\73\254\30\0\1\65\1\66\121\0\1\66"+
    "\1\65\121\0\1\66\1\0\1\66\120\0\1\65\122\0"+
    "\1\261\1\66\2\0\1\262\1\0\1\263\114\0\1\66"+
    "\4\0\1\65\115\0\1\66\4\0\1\264\1\123\114\0"+
    "\1\66\1\265\121\0\1\66\7\0\1\66\112\0\1\66"+
    "\10\0\1\66\111\0\1\66\123\0\1\266\12\0\1\65"+
    "\57\0\2\42\1\0\1\42\1\0\10\42\27\0\1\42"+
    "\1\267\13\42\1\267\7\42\1\0\12\42\3\0\4\42"+
    "\1\0\3\42\4\0\2\42\1\0\1\270\1\0\10\42"+
    "\27\0\22\42\1\270\2\42\1\0\12\42\3\0\4\42"+
    "\1\0\3\42\4\0\2\42\1\0\1\42\1\0\3\42"+
    "\1\271\4\42\27\0\1\42\1\272\1\42\1\273\2\42"+
    "\1\273\5\42\1\274\1\272\1\42\1\271\5\42\1\0"+
    "\1\42\1\274\10\42\3\0\4\42\1\0\3\42\4\0"+
    "\2\42\1\0\1\275\1\0\10\42\27\0\2\42\1\276"+
    "\10\42\1\276\6\42\1\275\2\42\1\0\10\42\1\277"+
    "\1\42\3\0\4\42\1\0\3\42\4\0\2\42\1\0"+
    "\1\300\1\0\10\42\27\0\1\301\4\42\1\302\4\42"+
    "\1\301\7\42\1\300\2\42\1\0\3\42\1\302\6\42"+
    "\3\0\4\42\1\0\3\42\4\0\2\42\1\0\1\42"+
    "\1\0\2\42\1\303\5\42\27\0\3\42\1\304\2\42"+
    "\1\305\1\306\1\303\3\42\1\307\10\42\1\0\1\42"+
    "\1\307\10\42\3\0\1\42\1\310\2\42\1\0\3\42"+
    "\4\0\2\42\1\0\1\42\1\0\10\42\27\0\1\42"+
    "\1\311\13\42\1\311\7\42\1\0\11\42\1\312\3\0"+
    "\4\42\1\0\3\42\4\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\1\244\1\42\1\245\2\42\1\246\3\42"+
    "\1\313\1\244\1\245\11\42\1\0\3\42\1\246\4\42"+
    "\1\247\1\42\3\0\4\42\1\0\3\42\4\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\5\42\1\314\17\42"+
    "\1\0\3\42\1\314\6\42\3\0\4\42\1\0\3\42"+
    "\4\0\2\42\1\0\1\42\1\0\10\42\27\0\1\42"+
    "\1\267\13\42\1\267\1\42\1\315\5\42\1\0\12\42"+
    "\3\0\4\42\1\0\3\42\4\0\2\42\1\0\1\316"+
    "\1\0\10\42\27\0\7\42\1\317\12\42\1\316\2\42"+
    "\1\0\5\42\1\320\4\42\3\0\2\42\1\321\1\42"+
    "\1\0\3\42\4\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\1\322\10\42\1\323\1\322\12\42\1\0\6\42"+
    "\1\323\3\42\3\0\4\42\1\0\3\42\4\0\2\42"+
    "\1\0\1\42\1\0\10\42\6\0\1\47\7\0\1\250"+
    "\10\0\1\42\1\251\10\42\1\324\2\42\1\251\7\42"+
    "\1\0\12\42\1\252\2\0\4\42\1\0\3\42\4\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\2\42\1\325"+
    "\7\42\1\326\1\325\11\42\1\0\12\42\3\0\4\42"+
    "\1\0\3\42\4\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\1\327\1\42\1\330\6\42\1\331\1\327\1\330"+
    "\11\42\1\0\6\42\1\331\3\42\3\0\4\42\1\0"+
    "\3\42\4\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\1\42\1\332\1\333\10\42\1\333\1\42\1\332\7\42"+
    "\1\0\10\42\1\334\1\42\3\0\4\42\1\0\3\42"+
    "\4\0\2\42\1\0\1\316\1\0\10\42\27\0\7\42"+
    "\1\320\12\42\1\316\2\42\1\0\5\42\1\320\4\42"+
    "\3\0\2\42\1\321\1\42\1\0\3\42\4\0\2\42"+
    "\1\0\1\42\1\0\2\42\1\303\5\42\27\0\3\42"+
    "\1\304\2\42\1\304\1\42\1\303\3\42\1\307\10\42"+
    "\1\0\1\42\1\307\10\42\3\0\1\42\1\310\2\42"+
    "\1\0\3\42\4\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\3\42\1\335\2\42\1\335\5\42\1\336\10\42"+
    "\1\0\1\42\1\336\10\42\3\0\4\42\1\0\3\42"+
    "\3\0\25\252\1\337\57\252\1\256\15\252\10\0\1\340"+
    "\1\341\5\0\1\342\25\0\1\343\1\344\1\345\1\0"+
    "\1\346\1\347\2\0\1\340\1\0\1\343\1\345\1\350"+
    "\1\344\1\0\1\341\1\0\1\346\5\0\1\350\1\0"+
    "\1\347\4\0\1\351\20\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\5\42\1\352\17\42\1\0\3\42\1\352"+
    "\6\42\3\0\4\42\1\0\3\42\4\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\25\42\1\0\11\42\1\353"+
    "\3\0\4\42\1\0\3\42\117\0\1\354\7\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\2\42\1\325\10\42"+
    "\1\325\11\42\1\0\12\42\3\0\4\42\1\0\3\42"+
    "\3\0\23\124\1\355\1\0\1\356\1\124\1\357\75\124"+
    "\1\360\1\124\1\360\2\124\3\360\1\124\1\361\1\360"+
    "\6\124\1\362\1\363\1\356\1\124\1\364\15\124\25\360"+
    "\1\124\12\360\3\124\4\360\1\124\3\360\151\124\1\365"+
    "\1\363\1\356\1\124\1\366\73\124\23\131\1\367\1\131"+
    "\1\370\1\0\1\371\75\131\1\360\1\131\1\360\2\131"+
    "\3\360\1\131\1\372\1\360\6\131\1\373\1\131\1\370"+
    "\1\363\1\364\15\131\25\360\1\131\12\360\3\131\4\360"+
    "\1\131\3\360\151\131\1\365\1\131\1\370\1\363\1\374"+
    "\73\131\31\0\1\375\114\0\1\365\100\0\2\140\1\0"+
    "\1\140\1\0\10\140\27\0\25\140\1\0\12\140\3\0"+
    "\4\140\1\0\3\140\117\0\1\376\6\0\16\142\1\0"+
    "\3\142\1\0\1\377\1\142\1\u0100\1\142\1\u0101\75\142"+
    "\1\u0102\1\142\1\u0102\2\142\3\u0102\1\142\2\u0102\1\142"+
    "\1\0\1\143\2\142\1\0\1\377\1\142\1\u0100\1\142"+
    "\1\u0101\15\142\25\u0102\1\142\12\u0102\3\142\4\u0102\1\142"+
    "\3\u0102\5\142\1\u0102\1\142\1\u0102\2\142\3\u0102\1\142"+
    "\2\u0102\1\142\1\u0103\1\143\2\142\1\0\1\377\1\142"+
    "\1\u0100\1\142\1\u0101\15\142\25\u0102\1\142\12\u0102\3\142"+
    "\4\u0102\1\142\3\u0102\3\142\2\0\1\360\1\0\1\360"+
    "\2\0\3\360\1\0\2\360\12\0\1\364\15\0\25\360"+
    "\1\0\12\360\3\0\4\360\1\0\3\360\3\0\123\142"+
    "\16\151\1\u0104\3\151\1\u0104\100\151\2\0\1\151\1\0"+
    "\1\151\2\0\3\151\1\0\2\151\2\0\1\u0105\25\0"+
    "\25\151\1\0\12\151\3\0\4\151\1\0\3\151\4\0"+
    "\2\153\1\0\1\153\1\0\10\153\3\0\1\u0106\23\0"+
    "\25\153\1\0\12\153\3\0\4\153\1\0\3\153\5\0"+
    "\1\153\1\0\1\153\2\0\3\153\1\0\2\153\2\0"+
    "\1\u0107\25\0\25\153\1\0\12\153\3\0\4\153\1\0"+
    "\3\153\3\0\16\155\1\0\3\155\1\0\101\155\2\u0108"+
    "\1\155\1\u0108\1\155\5\u0108\1\155\1\u0108\1\155\1\0"+
    "\2\155\1\u0109\1\0\22\155\25\u0108\1\155\12\u0108\3\155"+
    "\4\u0108\1\155\3\u0108\5\155\1\u010a\1\155\1\u010a\2\155"+
    "\3\u010a\1\155\2\u010a\1\155\1\u010b\1\u010c\2\155\1\u010b"+
    "\22\155\25\u010a\1\155\12\u010a\3\155\4\u010a\1\155\3\u010a"+
    "\5\155\1\u010a\1\155\1\u010a\2\155\3\u010a\1\155\2\u010a"+
    "\1\155\1\157\1\u010c\2\155\1\u010b\22\155\25\u010a\1\155"+
    "\12\u010a\3\155\4\u010a\1\155\3\u010a\3\155\16\u010d\1\u010e"+
    "\3\u010d\1\u010e\100\u010d\2\0\1\u010d\1\0\1\u010d\2\0"+
    "\3\u010d\1\0\2\u010d\2\0\1\u010f\25\0\25\u010d\1\0"+
    "\12\u010d\3\0\4\u010d\1\0\3\u010d\4\0\2\164\1\0"+
    "\1\164\1\0\10\164\3\0\1\u0110\23\0\25\164\1\0"+
    "\12\164\3\0\4\164\1\0\3\164\5\0\1\164\1\0"+
    "\1\164\2\0\3\164\1\0\2\164\1\0\1\165\1\u0111"+
    "\2\0\1\165\22\0\25\164\1\0\12\164\3\0\4\164"+
    "\1\0\3\164\5\0\1\164\1\0\1\164\2\0\3\164"+
    "\1\0\2\164\2\0\1\u0111\25\0\25\164\1\0\12\164"+
    "\3\0\4\164\1\0\3\164\4\0\2\171\1\0\1\171"+
    "\1\0\10\171\27\0\25\171\1\0\12\171\3\0\4\171"+
    "\1\0\3\171\34\0\1\u0112\72\0\2\u0113\1\0\1\u0113"+
    "\1\0\10\u0113\2\u0114\2\0\1\u0114\5\0\1\u0115\14\0"+
    "\25\u0113\1\0\12\u0113\3\0\4\u0113\1\0\3\u0113\4\0"+
    "\1\176\1\u0116\3\0\1\176\3\0\1\176\111\0\1\176"+
    "\1\u0116\3\0\1\176\1\242\2\0\1\176\112\0\1\u0117"+
    "\1\0\1\u0117\2\0\3\u0117\1\0\2\u0117\30\0\25\u0117"+
    "\1\0\12\u0117\3\0\4\u0117\1\0\3\u0117\3\0\35\204"+
    "\1\u0118\122\204\1\u0118\1\u0119\64\204\35\206\1\u011a\122\206"+
    "\1\u011a\1\u011b\64\206\16\210\1\211\3\210\1\211\14\210"+
    "\1\211\4\210\1\211\56\210\16\0\1\u011c\104\0\16\210"+
    "\1\211\3\210\1\211\13\210\1\u011d\1\211\4\210\1\211"+
    "\56\210\31\0\1\u011e\122\0\1\266\107\0\2\217\2\0"+
    "\1\217\100\0\34\26\1\0\2\26\1\0\4\26\1\0"+
    "\5\26\1\0\1\26\1\0\4\26\2\0\6\26\3\0"+
    "\12\26\1\0\14\26\30\0\1\u011f\122\0\1\u011f\42\0"+
    "\1\u0120\3\0\1\u0120\114\0\1\u0121\3\0\1\u0121\26\0"+
    "\1\31\4\0\1\31\3\0\1\31\111\0\1\231\2\0"+
    "\1\227\1\0\1\231\3\0\1\231\54\0\1\227\34\0"+
    "\1\176\3\0\1\u0116\1\176\3\0\1\176\17\0\1\u0116"+
    "\71\0\2\42\1\0\1\42\1\0\2\42\1\u0122\5\42"+
    "\27\0\3\42\1\u0123\1\u0124\1\42\1\u0123\1\u0125\1\u0122"+
    "\1\u0126\7\42\1\u0124\2\42\1\u0127\1\0\2\42\1\u0127"+
    "\2\42\1\u0125\1\u0126\2\42\1\u0128\3\0\1\42\1\u0129"+
    "\2\42\1\0\3\42\4\0\1\231\1\u012a\1\0\1\227"+
    "\1\0\1\231\3\0\1\231\54\0\1\227\36\0\1\66"+
    "\120\0\2\42\1\0\1\42\1\0\10\42\27\0\5\42"+
    "\1\u012b\1\42\1\u012c\15\42\1\0\3\42\1\u012b\1\42"+
    "\1\u012c\4\42\3\0\4\42\1\0\3\42\4\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\4\42\1\u012d\14\42"+
    "\1\u012d\3\42\1\0\12\42\3\0\4\42\1\0\3\42"+
    "\4\0\2\42\1\0\1\42\1\0\10\42\27\0\14\42"+
    "\1\u012e\10\42\1\0\1\42\1\u012e\10\42\3\0\4\42"+
    "\1\0\3\42\4\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\2\42\1\u012f\10\42\1\u012f\11\42\1\0\12\42"+
    "\3\0\4\42\1\0\3\42\4\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\25\42\1\0\11\42\1\u0130\3\0"+
    "\4\42\1\0\3\42\4\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\25\42\1\0\1\u0131\3\42\1\u0131\5\42"+
    "\3\0\4\42\1\0\3\42\4\0\1\u0132\2\0\1\u0132"+
    "\1\0\1\u0132\1\0\3\u0132\34\0\1\u0132\1\0\1\u0132"+
    "\3\0\1\u0132\2\0\1\u0132\3\0\1\u0132\1\0\2\u0132"+
    "\1\0\1\u0132\3\0\1\u0132\33\0\1\u0133\3\0\1\u0133"+
    "\111\0\2\42\1\0\1\42\1\0\10\42\27\0\1\42"+
    "\1\u0134\13\42\1\u0134\7\42\1\0\12\42\3\0\4\42"+
    "\1\0\3\42\4\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\11\42\1\u0135\13\42\1\0\6\42\1\u0135\3\42"+
    "\3\0\4\42\1\0\3\42\4\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\3\42\1\u0136\2\42\1\u0136\16\42"+
    "\1\0\12\42\3\0\4\42\1\0\3\42\4\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\3\42\1\u0137\2\42"+
    "\1\u0137\16\42\1\0\12\42\3\0\4\42\1\0\3\42"+
    "\37\0\1\u0138\67\0\2\42\1\0\1\u0139\1\0\10\42"+
    "\27\0\22\42\1\u0139\2\42\1\0\12\42\3\0\4\42"+
    "\1\0\3\42\4\0\2\253\1\0\1\253\1\0\10\253"+
    "\27\0\25\253\1\0\12\253\3\0\4\253\1\0\3\253"+
    "\3\0\2\254\1\0\1\254\1\0\2\254\3\0\2\254"+
    "\1\0\6\254\1\255\1\256\1\257\1\254\1\0\15\254"+
    "\25\0\1\254\12\0\3\254\4\0\1\254\3\0\151\254"+
    "\1\0\1\256\1\257\1\254\1\260\73\254\31\0\1\66"+
    "\121\0\1\66\3\0\1\u013a\147\0\1\u013b\12\0\1\u013b"+
    "\63\0\1\u013c\103\0\2\265\2\0\1\265\116\0\2\266"+
    "\2\0\1\266\101\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\7\42\1\u013d\15\42\1\0\5\42\1\u013d\4\42"+
    "\3\0\4\42\1\0\2\42\1\u013e\4\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\14\42\1\u013f\10\42\1\0"+
    "\1\42\1\u013f\10\42\3\0\4\42\1\0\3\42\4\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\1\42\1\u0140"+
    "\13\42\1\u0140\7\42\1\0\12\42\3\0\4\42\1\0"+
    "\3\42\4\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\4\42\1\267\14\42\1\267\3\42\1\0\12\42\3\0"+
    "\4\42\1\0\3\42\4\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\25\42\1\0\12\42\3\0\2\42\1\u0141"+
    "\1\42\1\0\3\42\4\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\25\42\1\0\12\42\3\0\1\42\1\u0142"+
    "\2\42\1\0\3\42\4\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\11\42\1\u0143\13\42\1\0\6\42\1\u0143"+
    "\3\42\3\0\4\42\1\0\3\42\4\0\2\42\1\0"+
    "\1\42\1\0\2\42\1\u0144\5\42\27\0\10\42\1\u0144"+
    "\13\42\1\u0145\1\0\2\42\1\u0145\7\42\3\0\4\42"+
    "\1\0\3\42\4\0\2\42\1\0\1\u0146\1\0\10\42"+
    "\27\0\22\42\1\u0146\2\42\1\0\12\42\3\0\4\42"+
    "\1\0\3\42\4\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\7\42\1\u0147\4\42\1\u0148\7\42\1\u0149\1\0"+
    "\1\42\1\u0148\1\u0149\2\42\1\u0147\4\42\3\0\4\42"+
    "\1\0\3\42\4\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\7\42\1\u014a\4\42\1\u0148\7\42\1\u0149\1\0"+
    "\1\42\1\u0148\1\u0149\2\42\1\u0147\4\42\3\0\4\42"+
    "\1\0\3\42\4\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\22\42\1\u014b\2\42\1\0\12\42\3\0\4\42"+
    "\1\0\3\42\4\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\14\42\1\u014c\10\42\1\0\1\42\1\u014c\10\42"+
    "\3\0\4\42\1\0\3\42\4\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\25\42\1\0\1\u014d\3\42\1\u014d"+
    "\5\42\3\0\4\42\1\0\3\42\4\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\2\42\1\u014e\10\42\1\u014e"+
    "\11\42\1\0\10\42\1\u014f\1\42\3\0\1\u0150\3\42"+
    "\1\0\3\42\4\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\1\42\1\u0151\13\42\1\u0151\7\42\1\0\12\42"+
    "\3\0\4\42\1\0\3\42\4\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\12\42\1\u0152\12\42\1\0\12\42"+
    "\3\0\4\42\1\0\3\42\4\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\14\42\1\u0153\10\42\1\0\1\42"+
    "\1\u0153\10\42\3\0\4\42\1\0\3\42\4\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\23\42\1\u0154\1\42"+
    "\1\0\12\42\3\0\4\42\1\0\3\42\4\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\11\42\1\u0155\13\42"+
    "\1\0\6\42\1\u0155\3\42\3\0\4\42\1\0\3\42"+
    "\4\0\2\42\1\0\1\42\1\0\10\42\27\0\2\42"+
    "\1\u0156\10\42\1\u0156\1\42\1\u0157\7\42\1\0\12\42"+
    "\3\0\4\42\1\0\3\42\4\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\2\42\1\u0156\10\42\1\u0156\11\42"+
    "\1\0\12\42\3\0\4\42\1\0\3\42\4\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\5\42\1\u0158\17\42"+
    "\1\0\3\42\1\u0158\6\42\3\0\4\42\1\0\3\42"+
    "\4\0\2\42\1\0\1\42\1\0\10\42\27\0\7\42"+
    "\1\u0159\15\42\1\0\5\42\1\u0159\4\42\3\0\4\42"+
    "\1\0\3\42\4\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\1\u015a\11\42\1\u015a\12\42\1\0\12\42\3\0"+
    "\4\42\1\0\3\42\4\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\12\42\1\u015b\12\42\1\0\12\42\3\0"+
    "\4\42\1\0\3\42\4\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\1\42\1\u015c\13\42\1\u015c\7\42\1\0"+
    "\12\42\3\0\4\42\1\0\3\42\4\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\5\42\1\u015d\17\42\1\0"+
    "\12\42\3\0\4\42\1\0\3\42\4\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\3\42\1\u015e\2\42\1\u015e"+
    "\16\42\1\0\12\42\3\0\4\42\1\0\3\42\4\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\7\42\1\u015f"+
    "\1\42\1\u0160\2\42\1\u0161\10\42\1\0\1\42\1\u0161"+
    "\3\42\1\u015f\1\u0160\3\42\3\0\4\42\1\0\3\42"+
    "\4\0\2\42\1\0\1\42\1\0\10\42\27\0\1\u0162"+
    "\1\42\1\u0163\7\42\1\u0162\1\u0163\11\42\1\0\12\42"+
    "\3\0\4\42\1\0\3\42\4\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\1\u0164\4\42\1\u0165\4\42\1\u0164"+
    "\12\42\1\0\3\42\1\u0165\6\42\3\0\4\42\1\0"+
    "\3\42\4\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\1\42\1\u0166\13\42\1\u0166\7\42\1\0\12\42\3\0"+
    "\4\42\1\0\3\42\4\0\2\42\1\0\1\42\1\0"+
    "\3\42\1\u0167\4\42\27\0\17\42\1\u0167\5\42\1\0"+
    "\12\42\3\0\4\42\1\0\3\42\4\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\14\42\1\u0168\10\42\1\0"+
    "\1\42\1\u0168\10\42\3\0\4\42\1\0\3\42\4\0"+
    "\2\42\1\0\1\u0169\1\0\10\42\27\0\22\42\1\u0169"+
    "\2\42\1\0\12\42\3\0\4\42\1\0\3\42\3\0"+
    "\123\252\56\0\1\u016a\22\0\1\u016a\66\0\1\u016b\4\0"+
    "\1\u016c\4\0\1\u016b\16\0\1\u016c\35\0\1\u016d\52\0"+
    "\1\u016d\42\0\1\u016e\62\0\1\u016e\101\0\1\u016f\13\0"+
    "\1\u016f\105\0\1\u0170\11\0\1\u0170\113\0\1\u0171\2\0"+
    "\1\u0171\123\0\1\u0172\23\0\1\u0172\72\0\1\u0173\2\0"+
    "\1\u0173\50\0\2\42\1\0\1\u0174\1\0\10\42\27\0"+
    "\22\42\1\u0174\2\42\1\0\12\42\3\0\4\42\1\0"+
    "\3\42\4\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\5\42\1\u0175\17\42\1\0\3\42\1\u0175\6\42\3\0"+
    "\4\42\1\0\3\42\3\0\2\124\1\0\1\124\1\0"+
    "\2\124\3\0\2\124\1\0\6\124\1\362\1\363\1\356"+
    "\1\124\1\0\15\124\25\0\1\124\12\0\3\124\4\0"+
    "\1\124\3\0\26\124\1\0\1\363\1\356\1\124\1\366"+
    "\73\124\1\0\2\360\1\0\1\360\1\0\10\360\27\0"+
    "\25\360\1\0\12\360\3\0\4\360\1\0\3\360\1\0"+
    "\1\u0176\1\0\1\124\2\361\1\124\1\361\1\124\10\361"+
    "\5\124\1\355\1\0\1\356\1\124\1\357\15\124\25\361"+
    "\1\124\12\361\3\124\4\361\1\124\3\361\1\124\1\u0177"+
    "\1\124\2\131\1\0\1\131\1\0\2\131\3\0\2\131"+
    "\1\0\6\131\1\373\1\131\1\370\1\363\1\0\15\131"+
    "\25\0\1\131\12\0\3\131\4\0\1\131\3\0\26\131"+
    "\1\0\1\131\1\370\1\363\1\374\74\131\2\372\1\131"+
    "\1\372\1\131\10\372\5\131\1\367\1\131\1\370\1\0"+
    "\1\371\15\131\25\372\1\131\12\372\3\131\4\372\1\131"+
    "\3\372\1\131\1\u0178\1\131\2\142\1\u0179\1\142\1\u0179"+
    "\2\142\3\u0179\2\142\1\u0179\1\142\1\0\3\142\1\0"+
    "\1\u017a\1\142\1\u0100\1\142\1\u017b\15\142\25\u0179\1\142"+
    "\12\u0179\3\142\4\u0179\1\142\3\u0179\21\142\1\0\3\142"+
    "\1\0\116\142\1\0\3\142\1\0\1\u017b\1\142\1\u0100"+
    "\1\142\1\u017c\73\142\16\u0102\1\u017d\3\u0102\1\u017d\100\u0102"+
    "\2\0\1\u0102\1\0\1\u0102\2\0\3\u0102\1\0\2\u0102"+
    "\2\0\1\u0103\25\0\25\u0102\1\0\12\u0102\3\0\4\u0102"+
    "\1\0\3\u0102\3\0\16\u010a\1\u017e\3\u010a\1\u017e\100\u010a"+
    "\2\155\1\u0108\1\155\1\u0108\2\155\3\u0108\2\155\1\u0108"+
    "\1\155\1\u010b\3\155\1\u010b\22\155\25\u0108\1\155\12\u0108"+
    "\3\155\4\u0108\1\155\3\u0108\5\155\1\u010a\1\155\1\u010a"+
    "\2\155\3\u010a\1\155\2\u010a\1\155\1\0\1\u010c\2\155"+
    "\1\0\22\155\25\u010a\1\155\12\u010a\3\155\4\u010a\1\155"+
    "\3\u010a\3\155\16\0\2\u0114\2\0\1\u0114\5\0\1\u0115"+
    "\73\0\1\176\4\0\1\176\3\0\1\176\111\0\2\u0117"+
    "\1\0\1\u0117\1\0\10\u0117\27\0\25\u0117\1\0\12\u0117"+
    "\3\0\4\u0117\1\0\3\u0117\3\0\35\204\1\u0118\1\u017f"+
    "\64\204\35\206\1\u011a\1\u0180\64\206\16\210\1\211\3\210"+
    "\1\211\14\210\1\211\4\210\1\211\14\210\1\u0181\12\210"+
    "\1\u0181\26\210\16\0\2\u011e\2\0\1\u011e\204\0\1\u0182"+
    "\64\0\1\u0183\13\0\1\u0183\41\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\5\42\1\u0184\17\42\1\0\3\42"+
    "\1\u0184\4\42\1\u0185\1\42\3\0\4\42\1\0\3\42"+
    "\4\0\2\42\1\0\1\42\1\0\10\42\27\0\2\42"+
    "\1\u0186\10\42\1\u0186\11\42\1\0\12\42\3\0\4\42"+
    "\1\0\3\42\4\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\5\42\1\u0187\17\42\1\0\3\42\1\u0187\6\42"+
    "\3\0\4\42\1\0\3\42\4\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\1\42\1\u0188\13\42\1\u0188\7\42"+
    "\1\0\12\42\3\0\4\42\1\0\3\42\4\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\5\42\1\u0189\17\42"+
    "\1\0\3\42\1\u0189\6\42\3\0\4\42\1\0\3\42"+
    "\4\0\2\42\1\0\1\42\1\0\10\42\27\0\11\42"+
    "\1\u018a\13\42\1\0\6\42\1\u018a\3\42\3\0\4\42"+
    "\1\0\3\42\4\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\2\42\1\u018b\10\42\1\u018b\11\42\1\0\12\42"+
    "\3\0\4\42\1\0\3\42\4\0\2\42\1\0\1\u018c"+
    "\1\0\10\42\27\0\22\42\1\u018c\2\42\1\0\12\42"+
    "\3\0\4\42\1\0\3\42\4\0\1\231\4\0\1\231"+
    "\3\0\1\231\111\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\7\42\1\u018d\15\42\1\0\5\42\1\u018d\4\42"+
    "\3\0\4\42\1\0\3\42\4\0\2\42\1\0\1\u018e"+
    "\1\0\10\42\27\0\22\42\1\u018e\2\42\1\0\12\42"+
    "\3\0\4\42\1\0\3\42\4\0\2\42\1\0\1\42"+
    "\1\0\2\42\1\u018f\5\42\27\0\4\42\1\u0190\1\u0191"+
    "\2\42\1\u018f\3\42\1\u0192\4\42\1\u0190\3\42\1\0"+
    "\1\42\1\u0192\1\42\1\u0191\6\42\3\0\2\42\1\u0193"+
    "\1\42\1\0\3\42\4\0\2\42\1\0\1\u0194\1\0"+
    "\10\42\27\0\22\42\1\u0194\2\42\1\0\12\42\3\0"+
    "\4\42\1\0\3\42\4\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\11\42\1\u0195\13\42\1\0\6\42\1\u0195"+
    "\3\42\3\0\4\42\1\0\3\42\4\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\1\u0196\11\42\1\u0196\12\42"+
    "\1\0\12\42\3\0\4\42\1\0\3\42\4\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\7\42\1\u0197\15\42"+
    "\1\0\5\42\1\u0197\4\42\3\0\4\42\1\0\3\42"+
    "\4\0\1\u0132\1\242\1\0\1\u0132\1\0\1\u0132\1\0"+
    "\3\u0132\34\0\1\u0132\1\0\1\u0132\3\0\1\u0132\2\0"+
    "\1\u0132\3\0\1\u0132\1\0\2\u0132\1\0\1\u0132\3\0"+
    "\1\u0132\27\0\1\243\3\0\1\u0133\3\0\1\u0133\111\0"+
    "\2\42\1\0\1\u0198\1\0\10\42\27\0\22\42\1\u0198"+
    "\2\42\1\0\12\42\3\0\4\42\1\0\3\42\4\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\14\42\1\u0199"+
    "\10\42\1\0\1\42\1\u0199\10\42\3\0\4\42\1\0"+
    "\3\42\4\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\2\42\1\u019a\10\42\1\u019a\11\42\1\0\12\42\3\0"+
    "\4\42\1\0\3\42\4\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\24\42\1\u019b\1\0\2\42\1\u019b\7\42"+
    "\3\0\4\42\1\0\3\42\37\0\1\u013a\67\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\2\42\1\u019c\10\42"+
    "\1\u019c\11\42\1\0\12\42\3\0\4\42\1\0\3\42"+
    "\5\0\1\u019d\1\0\1\u019d\2\0\3\u019d\1\0\2\u019d"+
    "\2\0\1\u013a\4\0\1\u019e\20\0\25\u019d\1\0\12\u019d"+
    "\1\u019f\2\0\4\u019d\1\0\3\u019d\74\0\1\u01a0\3\0"+
    "\1\u01a0\43\0\2\u01a1\2\0\1\u01a1\101\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\25\42\1\0\10\42\1\u01a2"+
    "\1\42\3\0\4\42\1\0\3\42\4\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\25\42\1\0\10\42\1\u01a3"+
    "\1\42\3\0\4\42\1\0\3\42\4\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\7\42\1\u01a4\15\42\1\0"+
    "\5\42\1\u01a4\4\42\3\0\4\42\1\0\3\42\4\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\2\42\1\u01a5"+
    "\10\42\1\u01a5\11\42\1\0\12\42\3\0\4\42\1\0"+
    "\3\42\4\0\2\42\1\0\1\u01a6\1\0\10\42\27\0"+
    "\22\42\1\u01a6\2\42\1\0\12\42\3\0\4\42\1\0"+
    "\3\42\4\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\11\42\1\u01a7\13\42\1\0\6\42\1\u01a7\3\42\3\0"+
    "\4\42\1\0\3\42\4\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\2\42\1\u01a8\10\42\1\u01a8\11\42\1\0"+
    "\12\42\3\0\4\42\1\0\3\42\4\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\11\42\1\u01a9\13\42\1\0"+
    "\6\42\1\u01a9\3\42\3\0\4\42\1\0\3\42\4\0"+
    "\2\42\1\0\1\u01aa\1\0\10\42\27\0\22\42\1\u01aa"+
    "\2\42\1\0\12\42\3\0\4\42\1\0\3\42\4\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\7\42\1\u01ab"+
    "\15\42\1\0\5\42\1\u01ab\4\42\3\0\4\42\1\0"+
    "\3\42\4\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\11\42\1\u01ac\13\42\1\0\6\42\1\u01ac\3\42\3\0"+
    "\4\42\1\0\3\42\4\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\15\42\1\u01ad\7\42\1\0\12\42\3\0"+
    "\4\42\1\0\3\42\4\0\2\42\1\0\1\u01ae\1\0"+
    "\10\42\27\0\22\42\1\u01ae\2\42\1\0\12\42\3\0"+
    "\4\42\1\0\3\42\4\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\11\42\1\u01af\13\42\1\0\6\42\1\u01af"+
    "\3\42\3\0\4\42\1\0\3\42\4\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\5\42\1\u01b0\17\42\1\0"+
    "\3\42\1\u01b0\6\42\3\0\4\42\1\0\3\42\4\0"+
    "\2\42\1\0\1\u01b1\1\0\10\42\27\0\22\42\1\u01b1"+
    "\2\42\1\0\12\42\3\0\4\42\1\0\3\42\4\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\1\u01b2\11\42"+
    "\1\u01b2\12\42\1\0\12\42\3\0\4\42\1\0\3\42"+
    "\4\0\2\42\1\0\1\42\1\0\10\42\27\0\13\42"+
    "\1\u01b3\11\42\1\0\12\42\3\0\4\42\1\0\3\42"+
    "\4\0\2\42\1\0\1\42\1\0\10\42\27\0\7\42"+
    "\1\u01b4\15\42\1\0\5\42\1\u01b4\4\42\3\0\4\42"+
    "\1\0\3\42\4\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\22\42\1\u01b5\2\42\1\0\12\42\3\0\4\42"+
    "\1\0\3\42\4\0\2\42\1\0\1\42\1\0\2\42"+
    "\1\u01b6\5\42\27\0\10\42\1\u01b6\14\42\1\0\12\42"+
    "\3\0\4\42\1\0\3\42\4\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\7\42\1\u01b7\15\42\1\0\5\42"+
    "\1\u01b7\4\42\3\0\4\42\1\0\3\42\4\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\5\42\1\u01b8\17\42"+
    "\1\0\12\42\3\0\4\42\1\0\3\42\4\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\7\42\1\u01b9\15\42"+
    "\1\0\5\42\1\u01b9\4\42\3\0\4\42\1\0\3\42"+
    "\4\0\2\42\1\0\1\42\1\0\10\42\27\0\1\u01ba"+
    "\11\42\1\u01ba\12\42\1\0\12\42\3\0\4\42\1\0"+
    "\3\42\4\0\2\42\1\0\1\42\1\0\3\42\1\u01bb"+
    "\4\42\27\0\17\42\1\u01bb\5\42\1\0\12\42\3\0"+
    "\4\42\1\0\3\42\4\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\11\42\1\u01bc\13\42\1\0\12\42\3\0"+
    "\4\42\1\0\3\42\4\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\21\42\1\u01bd\3\42\1\0\12\42\3\0"+
    "\4\42\1\0\3\42\4\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\7\42\1\u01be\4\42\1\u01bf\10\42\1\0"+
    "\1\42\1\u01bf\3\42\1\u01be\4\42\3\0\4\42\1\0"+
    "\3\42\4\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\24\42\1\u01c0\1\0\2\42\1\u01c0\7\42\3\0\4\42"+
    "\1\0\3\42\4\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\11\42\1\u01c1\13\42\1\0\6\42\1\u01c1\3\42"+
    "\3\0\4\42\1\0\3\42\4\0\2\42\1\0\1\u01c2"+
    "\1\0\10\42\27\0\22\42\1\u01c2\2\42\1\0\12\42"+
    "\3\0\4\42\1\0\3\42\4\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\3\42\1\u01c3\2\42\1\u01c3\16\42"+
    "\1\0\12\42\3\0\4\42\1\0\3\42\4\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\14\42\1\u01c4\10\42"+
    "\1\0\1\42\1\u01c4\10\42\3\0\4\42\1\0\3\42"+
    "\4\0\2\42\1\0\1\42\1\0\10\42\27\0\7\42"+
    "\1\u01c5\15\42\1\0\5\42\1\u01c5\4\42\3\0\4\42"+
    "\1\0\3\42\4\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\3\42\1\u01c6\2\42\1\u01c6\11\42\1\u01c7\4\42"+
    "\1\0\12\42\3\0\4\42\1\0\1\u01c7\2\42\4\0"+
    "\2\42\1\0\1\u01c8\1\0\10\42\27\0\22\42\1\u01c8"+
    "\2\42\1\0\12\42\3\0\4\42\1\0\3\42\4\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\11\42\1\u01c9"+
    "\13\42\1\0\6\42\1\u01c9\3\42\3\0\4\42\1\0"+
    "\3\42\4\0\2\42\1\0\1\u01ca\1\0\10\42\27\0"+
    "\22\42\1\u01ca\2\42\1\0\12\42\3\0\4\42\1\0"+
    "\3\42\50\0\1\u01cb\11\0\1\u01cb\110\0\1\u01cc\11\0"+
    "\1\u01cc\113\0\1\u01cd\2\0\1\u01cd\137\0\1\u01ce\25\0"+
    "\1\u01ce\53\0\1\u01cf\10\0\1\u01cf\110\0\1\u01d0\13\0"+
    "\1\u01d0\143\0\1\u01d1\73\0\1\u01d2\23\0\1\u01d2\70\0"+
    "\1\u01d3\13\0\1\u01d3\121\0\1\u01d4\12\0\1\u01d4\27\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\11\42\1\u01d5"+
    "\13\42\1\0\6\42\1\u01d5\3\42\3\0\4\42\1\0"+
    "\3\42\4\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\11\42\1\u01d6\13\42\1\0\6\42\1\u01d6\3\42\3\0"+
    "\4\42\1\0\3\42\4\0\2\u0179\1\0\1\u0179\1\0"+
    "\10\u0179\27\0\25\u0179\1\0\12\u0179\3\0\4\u0179\1\0"+
    "\3\u0179\1\0\1\u01d7\1\0\2\142\1\0\1\142\1\0"+
    "\2\142\3\0\2\142\1\0\1\142\1\0\3\142\1\0"+
    "\1\u017a\1\142\1\u0100\1\142\1\0\15\142\25\0\1\142"+
    "\12\0\3\142\4\0\1\142\3\0\21\142\1\0\3\142"+
    "\2\0\1\142\1\u0100\1\142\1\u017c\73\142\16\210\1\211"+
    "\3\210\1\211\14\210\1\211\4\210\1\211\24\210\1\u01d8"+
    "\3\210\1\u01d8\25\210\73\0\1\u01d9\3\0\1\u01d9\75\0"+
    "\1\u01da\23\0\1\u01da\25\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\11\42\1\u01db\13\42\1\0\6\42\1\u01db"+
    "\3\42\3\0\4\42\1\0\3\42\4\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\3\42\1\u01dc\2\42\1\u01dc"+
    "\16\42\1\0\12\42\3\0\4\42\1\0\3\42\4\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\25\42\1\0"+
    "\12\42\3\0\1\42\1\u01dd\2\42\1\0\3\42\4\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\1\42\1\u01de"+
    "\13\42\1\u01de\7\42\1\0\12\42\3\0\4\42\1\0"+
    "\3\42\4\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\2\42\1\u01df\10\42\1\u01df\11\42\1\0\12\42\3\0"+
    "\4\42\1\0\3\42\4\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\3\42\1\u01e0\2\42\1\u01e0\16\42\1\0"+
    "\12\42\3\0\4\42\1\0\3\42\4\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\2\42\1\u01e1\10\42\1\u01e1"+
    "\11\42\1\0\12\42\3\0\4\42\1\0\3\42\4\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\11\42\1\u01e2"+
    "\13\42\1\0\6\42\1\u01e2\3\42\3\0\4\42\1\0"+
    "\3\42\4\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\7\42\1\u01e3\15\42\1\0\5\42\1\u01e3\4\42\3\0"+
    "\4\42\1\0\3\42\4\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\3\42\1\u01e4\2\42\1\u01e4\16\42\1\0"+
    "\12\42\3\0\4\42\1\0\3\42\4\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\1\u01e5\11\42\1\u01e5\12\42"+
    "\1\0\12\42\3\0\4\42\1\0\3\42\4\0\2\42"+
    "\1\0\1\u01e6\1\0\10\42\27\0\22\42\1\u01e6\2\42"+
    "\1\0\12\42\3\0\4\42\1\0\3\42\4\0\2\42"+
    "\1\0\1\42\1\0\2\42\1\u01e7\5\42\27\0\10\42"+
    "\1\u01e7\14\42\1\0\12\42\3\0\4\42\1\0\3\42"+
    "\4\0\2\42\1\0\1\42\1\0\10\42\27\0\25\42"+
    "\1\0\12\42\3\0\2\42\1\u01e8\1\42\1\0\3\42"+
    "\4\0\2\42\1\0\1\42\1\0\10\42\27\0\25\42"+
    "\1\0\11\42\1\u01e9\3\0\4\42\1\0\3\42\4\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\5\42\1\u01ea"+
    "\17\42\1\0\3\42\1\u01ea\6\42\3\0\4\42\1\0"+
    "\3\42\4\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\25\42\1\0\12\42\3\0\1\u01eb\3\42\1\0\3\42"+
    "\4\0\2\42\1\0\1\42\1\0\10\42\27\0\2\42"+
    "\1\u01ec\10\42\1\u01ec\11\42\1\0\12\42\3\0\4\42"+
    "\1\0\3\42\4\0\2\42\1\0\1\u01ed\1\0\10\42"+
    "\27\0\22\42\1\u01ed\2\42\1\0\12\42\3\0\4\42"+
    "\1\0\3\42\4\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\11\42\1\u01ee\13\42\1\0\6\42\1\u01ee\3\42"+
    "\3\0\4\42\1\0\3\42\4\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\7\42\1\u01ef\15\42\1\0\5\42"+
    "\1\u01ef\4\42\3\0\4\42\1\0\3\42\4\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\25\42\1\0\12\42"+
    "\3\0\3\42\1\u01f0\1\0\3\42\4\0\2\u019d\1\0"+
    "\1\u019d\1\0\10\u019d\1\u01f1\3\0\1\u01f2\22\0\25\u019d"+
    "\1\0\12\u019d\3\0\4\u019d\1\0\3\u019d\5\0\1\u01f3"+
    "\1\0\1\u01f3\2\0\3\u01f3\1\0\2\u01f3\30\0\25\u01f3"+
    "\1\0\12\u01f3\3\0\4\u01f3\1\0\3\u01f3\5\0\1\u01f4"+
    "\1\0\1\u01f4\2\0\3\u01f4\1\0\2\u01f4\30\0\25\u01f4"+
    "\1\0\12\u01f4\3\0\4\u01f4\1\0\3\u01f4\51\0\1\u01f5"+
    "\13\0\1\u01f5\41\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\1\42\1\u01f6\13\42\1\u01f6\7\42\1\0\12\42"+
    "\3\0\4\42\1\0\3\42\4\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\5\42\1\u01f7\17\42\1\0\3\42"+
    "\1\u01f7\6\42\3\0\4\42\1\0\3\42\4\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\1\42\1\u01f8\13\42"+
    "\1\u01f8\7\42\1\0\12\42\3\0\4\42\1\0\3\42"+
    "\4\0\2\42\1\0\1\42\1\0\10\42\27\0\25\42"+
    "\1\0\12\42\3\0\1\u01f9\3\42\1\0\3\42\4\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\14\42\1\u01fa"+
    "\10\42\1\0\1\42\1\u01fa\10\42\3\0\4\42\1\0"+
    "\3\42\4\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\25\42\1\0\10\42\1\u01fb\1\42\3\0\4\42\1\0"+
    "\3\42\4\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\2\42\1\u01fc\10\42\1\u01fc\11\42\1\0\12\42\3\0"+
    "\4\42\1\0\3\42\4\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\1\42\1\u01fd\13\42\1\u01fd\7\42\1\0"+
    "\12\42\3\0\4\42\1\0\3\42\4\0\2\42\1\0"+
    "\1\u01fe\1\0\10\42\27\0\2\42\1\u01ff\10\42\1\u01ff"+
    "\6\42\1\u01fe\2\42\1\0\12\42\3\0\4\42\1\0"+
    "\3\42\4\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\25\42\1\0\10\42\1\u0200\1\42\3\0\4\42\1\0"+
    "\3\42\4\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\13\42\1\u0201\11\42\1\0\12\42\3\0\4\42\1\0"+
    "\3\42\4\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\7\42\1\u0202\15\42\1\0\5\42\1\u0202\4\42\3\0"+
    "\4\42\1\0\3\42\4\0\2\42\1\0\1\u0203\1\0"+
    "\10\42\27\0\22\42\1\u0203\2\42\1\0\12\42\3\0"+
    "\4\42\1\0\3\42\4\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\7\42\1\u0204\15\42\1\0\5\42\1\u0204"+
    "\4\42\3\0\4\42\1\0\3\42\4\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\25\42\1\0\12\42\3\0"+
    "\2\42\1\u0205\1\42\1\0\3\42\4\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\7\42\1\u0206\15\42\1\0"+
    "\12\42\3\0\4\42\1\0\3\42\4\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\24\42\1\u0207\1\0\12\42"+
    "\3\0\4\42\1\0\3\42\4\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\5\42\1\u0208\17\42\1\0\3\42"+
    "\1\u0208\6\42\3\0\4\42\1\0\3\42\4\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\6\42\1\u0209\16\42"+
    "\1\0\12\42\3\0\4\42\1\0\3\42\4\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\24\42\1\u020a\1\0"+
    "\2\42\1\u020a\7\42\3\0\4\42\1\0\3\42\4\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\2\42\1\u020b"+
    "\10\42\1\u020b\11\42\1\0\12\42\3\0\4\42\1\0"+
    "\3\42\4\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\5\42\1\u020c\17\42\1\0\3\42\1\u020c\6\42\3\0"+
    "\4\42\1\0\3\42\4\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\7\42\1\u020d\15\42\1\0\5\42\1\u020d"+
    "\4\42\3\0\4\42\1\0\3\42\4\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\25\42\1\0\11\42\1\u020e"+
    "\3\0\4\42\1\0\3\42\4\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\2\42\1\u020f\10\42\1\u020f\11\42"+
    "\1\0\12\42\3\0\4\42\1\0\3\42\4\0\2\42"+
    "\1\0\1\u0210\1\0\10\42\27\0\22\42\1\u0210\2\42"+
    "\1\0\12\42\3\0\4\42\1\0\3\42\4\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\14\42\1\u0211\10\42"+
    "\1\0\1\42\1\u0211\10\42\3\0\4\42\1\0\3\42"+
    "\4\0\2\42\1\0\1\u0212\1\0\10\42\27\0\22\42"+
    "\1\u0212\2\42\1\0\12\42\3\0\4\42\1\0\3\42"+
    "\4\0\2\42\1\0\1\42\1\0\10\42\27\0\7\42"+
    "\1\u0213\15\42\1\0\5\42\1\u0213\4\42\3\0\4\42"+
    "\1\0\3\42\4\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\2\42\1\u0214\10\42\1\u0214\11\42\1\0\12\42"+
    "\3\0\4\42\1\0\3\42\4\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\3\42\1\u0215\2\42\1\u0215\16\42"+
    "\1\0\12\42\3\0\4\42\1\0\3\42\4\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\5\42\1\u0216\17\42"+
    "\1\0\3\42\1\u0216\6\42\3\0\4\42\1\0\3\42"+
    "\4\0\2\42\1\0\1\42\1\0\10\42\27\0\7\42"+
    "\1\u0217\15\42\1\0\5\42\1\u0217\4\42\3\0\4\42"+
    "\1\0\3\42\52\0\1\u0218\10\0\1\u0218\120\0\1\u0219"+
    "\22\0\1\u0219\70\0\1\u021a\10\0\1\u021a\46\0\1\u021b"+
    "\62\0\1\u021b\111\0\1\u021c\22\0\1\u021c\70\0\1\u021d"+
    "\10\0\1\u021d\53\0\1\u021e\52\0\1\u021e\42\0\1\u021f"+
    "\12\0\1\u021c\47\0\1\u021f\2\0\1\u0220\102\0\1\u0221"+
    "\23\0\1\u0221\30\0\1\u0218\62\0\1\u0218\34\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\4\42\1\u0222\14\42"+
    "\1\u0222\3\42\1\0\12\42\3\0\4\42\1\0\3\42"+
    "\4\0\2\42\1\0\1\u0223\1\0\10\42\27\0\22\42"+
    "\1\u0223\2\42\1\0\12\42\3\0\4\42\1\0\3\42"+
    "\3\0\16\210\1\211\3\210\1\211\14\210\1\211\4\210"+
    "\1\211\1\210\1\u0224\13\210\1\u0224\40\210\73\0\1\u0225"+
    "\3\0\1\u0225\24\0\2\42\1\0\1\u0226\1\0\10\42"+
    "\27\0\22\42\1\u0226\2\42\1\0\12\42\3\0\4\42"+
    "\1\0\3\42\4\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\24\42\1\u0227\1\0\2\42\1\u0227\7\42\3\0"+
    "\4\42\1\0\3\42\4\0\2\42\1\0\1\u0228\1\0"+
    "\10\42\27\0\22\42\1\u0228\2\42\1\0\12\42\3\0"+
    "\4\42\1\0\3\42\4\0\1\42\1\u0229\1\0\1\42"+
    "\1\0\10\42\27\0\25\42\1\0\12\42\3\0\4\42"+
    "\1\0\3\42\4\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\5\42\1\u022a\17\42\1\0\3\42\1\u022a\6\42"+
    "\3\0\4\42\1\0\3\42\4\0\2\42\1\0\1\u022b"+
    "\1\0\10\42\27\0\22\42\1\u022b\2\42\1\0\12\42"+
    "\3\0\4\42\1\0\3\42\4\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\14\42\1\u022c\10\42\1\0\1\42"+
    "\1\u022c\10\42\3\0\4\42\1\0\3\42\4\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\7\42\1\u022d\15\42"+
    "\1\0\5\42\1\u022d\4\42\3\0\4\42\1\0\3\42"+
    "\4\0\2\42\1\0\1\42\1\0\10\42\27\0\25\42"+
    "\1\0\11\42\1\u022e\3\0\4\42\1\0\3\42\4\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\4\42\1\u022f"+
    "\14\42\1\u022f\3\42\1\0\12\42\3\0\4\42\1\0"+
    "\3\42\4\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\1\42\1\u0230\13\42\1\u0230\7\42\1\0\12\42\3\0"+
    "\4\42\1\0\3\42\4\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\24\42\1\u0231\1\0\2\42\1\u0231\7\42"+
    "\3\0\4\42\1\0\3\42\4\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\5\42\1\u0232\17\42\1\0\3\42"+
    "\1\u0232\6\42\3\0\4\42\1\0\3\42\4\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\5\42\1\u0233\17\42"+
    "\1\0\3\42\1\u0233\6\42\3\0\4\42\1\0\3\42"+
    "\4\0\2\42\1\0\1\42\1\0\2\42\1\u0234\5\42"+
    "\27\0\10\42\1\u0234\14\42\1\0\12\42\3\0\4\42"+
    "\1\0\3\42\4\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\24\42\1\u0235\1\0\2\42\1\u0235\7\42\3\0"+
    "\4\42\1\0\3\42\4\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\11\42\1\u0236\13\42\1\0\6\42\1\u0236"+
    "\3\42\3\0\4\42\1\0\3\42\4\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\5\42\1\u0237\17\42\1\0"+
    "\3\42\1\u0237\6\42\3\0\4\42\1\0\3\42\21\0"+
    "\1\u01f1\105\0\2\u01f3\1\0\1\u01f3\1\0\10\u01f3\6\0"+
    "\1\u0238\20\0\25\u01f3\1\0\12\u01f3\3\0\4\u01f3\1\0"+
    "\3\u01f3\4\0\2\u01f4\1\0\1\u01f4\1\0\10\u01f4\27\0"+
    "\25\u01f4\1\0\12\u01f4\1\u0239\2\0\4\u01f4\1\0\3\u01f4"+
    "\55\0\1\u023a\23\0\1\u023a\25\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\3\42\1\u023b\2\42\1\u023b\16\42"+
    "\1\0\12\42\3\0\4\42\1\0\3\42\4\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\1\42\1\u023c\13\42"+
    "\1\u023c\7\42\1\0\12\42\3\0\4\42\1\0\3\42"+
    "\4\0\2\42\1\0\1\42\1\0\10\42\27\0\2\42"+
    "\1\u023d\10\42\1\u023d\11\42\1\0\12\42\3\0\4\42"+
    "\1\0\3\42\4\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\25\42\1\0\1\u023e\3\42\1\u023e\5\42\3\0"+
    "\4\42\1\0\3\42\4\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\11\42\1\u023f\13\42\1\0\6\42\1\u023f"+
    "\3\42\3\0\4\42\1\0\3\42\4\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\1\42\1\u0240\13\42\1\u0240"+
    "\7\42\1\0\12\42\3\0\4\42\1\0\3\42\4\0"+
    "\2\42\1\0\1\42\1\0\2\42\1\u0241\5\42\27\0"+
    "\10\42\1\u0241\14\42\1\0\12\42\3\0\4\42\1\0"+
    "\3\42\4\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\2\42\1\u0242\10\42\1\u0242\11\42\1\0\12\42\3\0"+
    "\4\42\1\0\3\42\4\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\3\42\1\u0243\2\42\1\u0243\16\42\1\0"+
    "\12\42\3\0\4\42\1\0\3\42\4\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\4\42\1\u0244\14\42\1\u0244"+
    "\3\42\1\0\12\42\3\0\4\42\1\0\3\42\4\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\17\42\1\u0245"+
    "\5\42\1\0\12\42\3\0\4\42\1\0\3\42\4\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\25\42\1\0"+
    "\12\42\3\0\1\42\1\u0246\2\42\1\0\3\42\4\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\7\42\1\u0247"+
    "\15\42\1\0\12\42\3\0\4\42\1\0\3\42\4\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\24\42\1\u0248"+
    "\1\0\2\42\1\u0248\7\42\3\0\4\42\1\0\3\42"+
    "\4\0\2\42\1\0\1\42\1\0\10\42\27\0\16\42"+
    "\1\u0249\6\42\1\0\12\42\3\0\4\42\1\0\3\42"+
    "\4\0\2\42\1\0\1\42\1\0\10\42\27\0\25\42"+
    "\1\0\11\42\1\u024a\3\0\4\42\1\0\3\42\4\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\11\42\1\u024b"+
    "\13\42\1\0\6\42\1\u024b\3\42\3\0\4\42\1\0"+
    "\3\42\4\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\3\42\1\u024c\2\42\1\u024c\16\42\1\0\12\42\3\0"+
    "\4\42\1\0\3\42\4\0\2\42\1\0\1\42\1\0"+
    "\3\42\1\u024d\4\42\27\0\17\42\1\u024d\5\42\1\0"+
    "\12\42\3\0\4\42\1\0\3\42\4\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\24\42\1\u024e\1\0\2\42"+
    "\1\u024e\7\42\3\0\4\42\1\0\3\42\4\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\7\42\1\u024f\15\42"+
    "\1\0\5\42\1\u024f\4\42\3\0\4\42\1\0\3\42"+
    "\4\0\2\42\1\0\1\42\1\0\10\42\27\0\7\42"+
    "\1\u0250\15\42\1\0\5\42\1\u0250\4\42\3\0\4\42"+
    "\1\0\3\42\4\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\24\42\1\u0251\1\0\2\42\1\u0251\7\42\3\0"+
    "\4\42\1\0\3\42\57\0\1\u021c\23\0\1\u021c\26\0"+
    "\1\u0252\12\0\1\u021c\47\0\1\u0252\2\0\1\u0220\76\0"+
    "\1\u021d\13\0\1\u021d\131\0\1\u0218\3\0\1\u0218\44\0"+
    "\1\u021c\52\0\1\u0220\140\0\1\u021c\70\0\1\u0253\22\0"+
    "\1\u0253\104\0\1\u0254\16\0\1\u0254\70\0\1\u0255\2\0"+
    "\1\u0255\50\0\2\42\1\0\1\42\1\0\10\42\2\u0256"+
    "\2\0\1\u0256\22\0\25\42\1\0\12\42\3\0\4\42"+
    "\1\0\3\42\3\0\16\210\1\211\3\210\1\211\14\210"+
    "\1\211\4\210\1\211\5\210\1\u0257\23\210\1\u0257\24\210"+
    "\54\0\1\u0258\23\0\1\u0258\23\0\1\42\1\u0259\1\0"+
    "\1\42\1\0\10\42\27\0\25\42\1\0\12\42\3\0"+
    "\4\42\1\0\3\42\4\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\7\42\1\u025a\15\42\1\0\5\42\1\u025a"+
    "\4\42\3\0\4\42\1\0\3\42\4\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\14\42\1\u025b\10\42\1\0"+
    "\1\42\1\u025b\10\42\3\0\4\42\1\0\3\42\4\0"+
    "\1\42\1\u025c\1\0\1\42\1\0\10\42\27\0\25\42"+
    "\1\0\12\42\3\0\4\42\1\0\3\42\4\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\7\42\1\u025d\15\42"+
    "\1\0\5\42\1\u025d\4\42\3\0\4\42\1\0\3\42"+
    "\4\0\1\42\1\u025e\1\0\1\42\1\0\10\42\27\0"+
    "\25\42\1\0\12\42\3\0\4\42\1\0\3\42\4\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\14\42\1\u025f"+
    "\10\42\1\0\1\42\1\u025f\10\42\3\0\4\42\1\0"+
    "\3\42\4\0\1\42\1\u0260\1\0\1\42\1\0\10\42"+
    "\27\0\25\42\1\0\12\42\3\0\4\42\1\0\3\42"+
    "\4\0\2\42\1\0\1\42\1\0\10\42\27\0\1\u0261"+
    "\11\42\1\u0261\12\42\1\0\12\42\3\0\4\42\1\0"+
    "\3\42\4\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\14\42\1\u0262\10\42\1\0\1\42\1\u0262\10\42\3\0"+
    "\4\42\1\0\3\42\4\0\2\42\1\0\1\u0263\1\0"+
    "\10\42\27\0\22\42\1\u0263\2\42\1\0\12\42\3\0"+
    "\4\42\1\0\3\42\4\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\11\42\1\u0264\13\42\1\0\6\42\1\u0264"+
    "\3\42\3\0\4\42\1\0\3\42\4\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\7\42\1\u0265\15\42\1\0"+
    "\5\42\1\u0265\4\42\3\0\4\42\1\0\3\42\4\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\11\42\1\u0266"+
    "\13\42\1\0\6\42\1\u0266\3\42\3\0\4\42\1\0"+
    "\3\42\4\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\25\42\1\0\11\42\1\u0267\3\0\4\42\1\0\3\42"+
    "\4\0\2\42\1\0\1\42\1\0\10\42\27\0\25\42"+
    "\1\0\12\42\3\0\1\u0268\3\42\1\0\3\42\4\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\1\u0269\11\42"+
    "\1\u0269\12\42\1\0\12\42\3\0\4\42\1\0\3\42"+
    "\21\0\1\u01f1\3\0\1\u01f2\116\0\1\u026a\3\0\1\u026b"+
    "\173\0\1\u026c\3\0\1\u026c\24\0\2\42\1\0\1\u026d"+
    "\1\0\10\42\27\0\22\42\1\u026d\2\42\1\0\12\42"+
    "\3\0\4\42\1\0\3\42\4\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\24\42\1\u026e\1\0\2\42\1\u026e"+
    "\7\42\3\0\4\42\1\0\3\42\4\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\2\42\1\u026f\10\42\1\u026f"+
    "\11\42\1\0\12\42\3\0\4\42\1\0\3\42\4\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\7\42\1\u0270"+
    "\15\42\1\0\5\42\1\u0270\4\42\3\0\4\42\1\0"+
    "\3\42\4\0\2\42\1\0\1\u0271\1\0\10\42\27\0"+
    "\22\42\1\u0271\2\42\1\0\12\42\3\0\4\42\1\0"+
    "\3\42\4\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\2\42\1\u0272\10\42\1\u0272\11\42\1\0\12\42\3\0"+
    "\4\42\1\0\3\42\4\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\4\42\1\u0273\14\42\1\u0273\3\42\1\0"+
    "\12\42\3\0\4\42\1\0\3\42\4\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\24\42\1\u0274\1\0\2\42"+
    "\1\u0274\7\42\3\0\4\42\1\0\3\42\4\0\2\42"+
    "\1\0\1\u0275\1\0\10\42\27\0\22\42\1\u0275\2\42"+
    "\1\0\12\42\3\0\4\42\1\0\3\42\4\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\11\42\1\u0276\13\42"+
    "\1\0\12\42\3\0\4\42\1\0\3\42\4\0\2\42"+
    "\1\0\1\u0277\1\0\10\42\27\0\22\42\1\u0277\2\42"+
    "\1\0\12\42\3\0\4\42\1\0\3\42\4\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\25\42\1\0\10\42"+
    "\1\u0278\1\42\3\0\4\42\1\0\3\42\4\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\11\42\1\u0279\13\42"+
    "\1\0\6\42\1\u0279\3\42\3\0\4\42\1\0\3\42"+
    "\4\0\2\42\1\0\1\42\1\0\10\42\27\0\7\42"+
    "\1\u027a\15\42\1\0\5\42\1\u027a\4\42\3\0\4\42"+
    "\1\0\3\42\4\0\2\42\1\0\1\u027b\1\0\10\42"+
    "\27\0\22\42\1\u027b\2\42\1\0\12\42\3\0\4\42"+
    "\1\0\3\42\52\0\1\u027c\10\0\1\u027c\46\0\1\u021c"+
    "\62\0\1\u021c\37\0\1\u027d\62\0\1\u027d\116\0\1\u021c"+
    "\16\0\1\u021c\30\0\1\u027e\5\0\2\u0256\2\0\1\u0256"+
    "\32\0\1\u027e\45\0\16\210\1\211\3\210\1\211\14\210"+
    "\1\211\4\210\1\211\26\210\1\u027f\3\210\1\u027f\23\210"+
    "\16\0\2\u0280\2\0\1\u0280\101\0\1\42\1\u0281\1\0"+
    "\1\42\1\0\10\42\27\0\25\42\1\0\12\42\3\0"+
    "\4\42\1\0\3\42\4\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\5\42\1\u0282\17\42\1\0\3\42\1\u0282"+
    "\6\42\3\0\4\42\1\0\3\42\4\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\25\42\1\0\1\u0283\3\42"+
    "\1\u0283\5\42\3\0\4\42\1\0\3\42\4\0\1\42"+
    "\1\u0284\1\0\1\42\1\0\10\42\27\0\25\42\1\0"+
    "\12\42\3\0\4\42\1\0\3\42\4\0\1\42\1\u0285"+
    "\1\0\1\42\1\0\10\42\27\0\25\42\1\0\12\42"+
    "\3\0\4\42\1\0\3\42\4\0\1\42\1\u0286\1\0"+
    "\1\42\1\0\10\42\27\0\25\42\1\0\12\42\3\0"+
    "\4\42\1\0\3\42\4\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\24\42\1\u0287\1\0\2\42\1\u0287\7\42"+
    "\3\0\4\42\1\0\3\42\4\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\4\42\1\u0288\14\42\1\u0288\3\42"+
    "\1\0\12\42\3\0\4\42\1\0\3\42\4\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\2\42\1\u0289\10\42"+
    "\1\u0289\11\42\1\0\12\42\3\0\4\42\1\0\3\42"+
    "\4\0\2\42\1\0\1\42\1\0\10\42\27\0\2\42"+
    "\1\u028a\10\42\1\u028a\11\42\1\0\12\42\3\0\4\42"+
    "\1\0\3\42\4\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\24\42\1\u028b\1\0\2\42\1\u028b\7\42\3\0"+
    "\4\42\1\0\3\42\4\0\2\42\1\0\1\u028c\1\0"+
    "\10\42\27\0\22\42\1\u028c\2\42\1\0\12\42\3\0"+
    "\4\42\1\0\3\42\4\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\3\42\1\u028d\2\42\1\u028d\16\42\1\0"+
    "\12\42\3\0\4\42\1\0\3\42\21\0\1\u026a\160\0"+
    "\1\u028e\23\0\1\u028e\23\0\1\42\1\u028f\1\0\1\42"+
    "\1\0\10\42\27\0\25\42\1\0\12\42\3\0\4\42"+
    "\1\0\3\42\4\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\7\42\1\u0290\15\42\1\0\5\42\1\u0290\4\42"+
    "\3\0\4\42\1\0\3\42\4\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\24\42\1\u0291\1\0\2\42\1\u0291"+
    "\7\42\3\0\4\42\1\0\3\42\4\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\24\42\1\u0292\1\0\2\42"+
    "\1\u0292\7\42\3\0\4\42\1\0\3\42\4\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\1\u0293\11\42\1\u0293"+
    "\12\42\1\0\12\42\3\0\4\42\1\0\3\42\4\0"+
    "\2\42\1\0\1\u0294\1\0\10\42\27\0\22\42\1\u0294"+
    "\2\42\1\0\12\42\3\0\4\42\1\0\3\42\4\0"+
    "\1\42\1\u0295\1\0\1\42\1\0\10\42\27\0\25\42"+
    "\1\0\12\42\3\0\4\42\1\0\3\42\4\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\22\42\1\u0296\2\42"+
    "\1\0\12\42\3\0\4\42\1\0\3\42\4\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\3\42\1\u0297\2\42"+
    "\1\u0297\16\42\1\0\12\42\3\0\4\42\1\0\3\42"+
    "\4\0\2\42\1\0\1\u0298\1\0\10\42\27\0\22\42"+
    "\1\u0298\2\42\1\0\12\42\3\0\4\42\1\0\3\42"+
    "\4\0\2\42\1\0\1\u0299\1\0\10\42\27\0\22\42"+
    "\1\u0299\2\42\1\0\12\42\3\0\4\42\1\0\3\42"+
    "\4\0\2\42\1\0\1\u029a\1\0\10\42\27\0\22\42"+
    "\1\u029a\2\42\1\0\12\42\3\0\4\42\1\0\3\42"+
    "\53\0\1\u021c\2\0\1\u021c\115\0\1\u021c\13\0\1\u021c"+
    "\106\0\1\u029b\13\0\1\u029b\40\0\16\210\1\211\3\210"+
    "\1\211\14\210\1\211\4\210\1\211\7\210\1\u029c\23\210"+
    "\1\u029c\22\210\16\0\2\u0280\2\0\1\u0280\33\0\1\u029d"+
    "\22\0\1\u029d\22\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\1\u029e\11\42\1\u029e\12\42\1\0\12\42\3\0"+
    "\4\42\1\0\3\42\4\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\2\42\1\u029f\10\42\1\u029f\11\42\1\0"+
    "\12\42\3\0\4\42\1\0\3\42\4\0\1\42\1\u02a0"+
    "\1\0\1\42\1\0\10\42\27\0\25\42\1\0\12\42"+
    "\3\0\4\42\1\0\3\42\4\0\1\42\1\u02a1\1\0"+
    "\1\42\1\0\10\42\27\0\25\42\1\0\12\42\3\0"+
    "\4\42\1\0\3\42\4\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\1\u02a2\11\42\1\u02a2\12\42\1\0\12\42"+
    "\3\0\4\42\1\0\3\42\4\0\1\42\1\u02a3\1\0"+
    "\1\42\1\0\10\42\27\0\25\42\1\0\12\42\3\0"+
    "\4\42\1\0\3\42\4\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\24\42\1\u02a4\1\0\2\42\1\u02a4\7\42"+
    "\3\0\4\42\1\0\3\42\4\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\1\42\1\u02a5\13\42\1\u02a5\7\42"+
    "\1\0\12\42\3\0\4\42\1\0\3\42\4\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\25\42\1\0\11\42"+
    "\1\u02a6\3\0\4\42\1\0\3\42\34\0\1\u02a7\72\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\1\u02a8\11\42"+
    "\1\u02a8\12\42\1\0\12\42\3\0\4\42\1\0\3\42"+
    "\4\0\2\42\1\0\1\u02a9\1\0\10\42\27\0\22\42"+
    "\1\u02a9\2\42\1\0\12\42\3\0\4\42\1\0\3\42"+
    "\4\0\2\42\1\0\1\u02aa\1\0\10\42\27\0\22\42"+
    "\1\u02aa\2\42\1\0\12\42\3\0\4\42\1\0\3\42"+
    "\4\0\2\42\1\0\1\42\1\0\2\42\1\u02ab\5\42"+
    "\27\0\10\42\1\u02ab\14\42\1\0\12\42\3\0\4\42"+
    "\1\0\3\42\4\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\1\u02ac\11\42\1\u02ac\12\42\1\0\12\42\3\0"+
    "\4\42\1\0\3\42\4\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\1\u02ad\11\42\1\u02ad\12\42\1\0\12\42"+
    "\3\0\4\42\1\0\3\42\4\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\7\42\1\u02ae\15\42\1\0\5\42"+
    "\1\u02ae\4\42\3\0\4\42\1\0\3\42\4\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\4\42\1\u02af\14\42"+
    "\1\u02af\3\42\1\0\12\42\3\0\4\42\1\0\3\42"+
    "\50\0\1\u02b0\11\0\1\u02b0\43\0\16\210\1\211\3\210"+
    "\1\211\6\210\1\u02b1\5\210\1\211\4\210\1\211\56\210"+
    "\47\0\1\u02b2\10\0\1\u02b2\43\0\2\42\1\0\1\42"+
    "\1\0\10\42\27\0\3\42\1\u02b3\2\42\1\u02b3\16\42"+
    "\1\0\12\42\3\0\4\42\1\0\3\42\4\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\24\42\1\u02b4\1\0"+
    "\2\42\1\u02b4\7\42\3\0\4\42\1\0\3\42\4\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\25\42\1\0"+
    "\12\42\3\0\1\42\1\u02b5\2\42\1\0\3\42\4\0"+
    "\1\42\1\u02b6\1\0\1\42\1\0\10\42\27\0\25\42"+
    "\1\0\12\42\3\0\4\42\1\0\3\42\4\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\25\42\1\0\11\42"+
    "\1\u02b7\3\0\4\42\1\0\3\42\4\0\2\42\1\0"+
    "\1\u02b8\1\0\10\42\27\0\22\42\1\u02b8\2\42\1\0"+
    "\12\42\3\0\4\42\1\0\3\42\21\0\2\u02a7\2\0"+
    "\1\u02a7\101\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\3\42\1\u02b9\2\42\1\u02b9\16\42\1\0\12\42\3\0"+
    "\4\42\1\0\3\42\4\0\2\42\1\0\1\42\1\0"+
    "\2\42\1\u02ba\5\42\27\0\10\42\1\u02ba\14\42\1\0"+
    "\12\42\3\0\4\42\1\0\3\42\4\0\2\42\1\0"+
    "\1\42\1\0\10\42\27\0\3\42\1\u02bb\2\42\1\u02bb"+
    "\16\42\1\0\12\42\3\0\4\42\1\0\3\42\4\0"+
    "\2\42\1\0\1\42\1\0\10\42\27\0\14\42\1\u02bc"+
    "\10\42\1\0\1\42\1\u02bc\10\42\3\0\4\42\1\0"+
    "\3\42\114\0\1\u02bd\11\0\16\210\1\u02be\1\u02b1\2\210"+
    "\1\u02be\14\210\1\211\4\210\1\211\56\210\50\0\1\u02bf"+
    "\2\0\1\u02bf\50\0\1\42\1\u02c0\1\0\1\42\1\0"+
    "\10\42\27\0\25\42\1\0\12\42\3\0\4\42\1\0"+
    "\3\42\4\0\2\42\1\0\1\u02c1\1\0\10\42\27\0"+
    "\22\42\1\u02c1\2\42\1\0\12\42\3\0\4\42\1\0"+
    "\3\42\4\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\25\42\1\0\1\u02c2\3\42\1\u02c2\5\42\3\0\4\42"+
    "\1\0\3\42\4\0\2\42\1\0\1\42\1\0\10\42"+
    "\27\0\24\42\1\u02c3\1\0\2\42\1\u02c3\7\42\3\0"+
    "\4\42\1\0\3\42\4\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\24\42\1\u02c4\1\0\2\42\1\u02c4\7\42"+
    "\3\0\4\42\1\0\3\42\66\0\1\u02c5\16\0\1\u02c5"+
    "\21\0\1\42\1\u02c6\1\0\1\42\1\0\10\42\27\0"+
    "\25\42\1\0\12\42\3\0\4\42\1\0\3\42\4\0"+
    "\1\42\1\u02c7\1\0\1\42\1\0\10\42\27\0\25\42"+
    "\1\0\12\42\3\0\4\42\1\0\3\42\4\0\2\42"+
    "\1\0\1\42\1\0\10\42\27\0\5\42\1\u02c8\17\42"+
    "\1\0\3\42\1\u02c8\6\42\3\0\4\42\1\0\3\42"+
    "\4\0\2\42\1\0\1\u02c9\1\0\10\42\27\0\22\42"+
    "\1\u02c9\2\42\1\0\12\42\3\0\4\42\1\0\3\42"+
    "\4\0\2\42\1\0\1\u02ca\1\0\10\42\27\0\22\42"+
    "\1\u02ca\2\42\1\0\12\42\3\0\4\42\1\0\3\42"+
    "\106\0\1\u02cb\20\0\1\42\1\u02cc\1\0\1\42\1\0"+
    "\10\42\27\0\25\42\1\0\12\42\3\0\4\42\1\0"+
    "\3\42\4\0\2\42\1\0\1\42\1\0\10\42\27\0"+
    "\11\42\1\u02cd\13\42\1\0\6\42\1\u02cd\3\42\3\0"+
    "\4\42\1\0\3\42\52\0\1\u02ce\10\0\1\u02ce\43\0"+
    "\2\42\1\0\1\u02cf\1\0\10\42\27\0\22\42\1\u02cf"+
    "\2\42\1\0\12\42\3\0\4\42\1\0\3\42\66\0"+
    "\1\u02d0\16\0\1\u02d0\21\0\2\42\1\0\1\42\1\0"+
    "\10\42\27\0\1\42\1\u02d1\13\42\1\u02d1\7\42\1\0"+
    "\12\42\3\0\4\42\1\0\3\42\7\0\1\u02d2\62\0"+
    "\1\u02d2\51\0\2\u02d2\2\0\1\u02d2\5\0\1\u02d3\110\0"+
    "\2\u02d3\2\0\1\u02d3\1\0\1\u02d4\46\0\1\u02d5\3\0"+
    "\1\u02d5\5\0\1\u02d6\110\0\1\u02d7\3\0\1\u02d7\127\0"+
    "\1\u02d8\111\0\1\u02d9\3\0\1\u02d9\127\0\1\u02da\111\0"+
    "\1\u02db\3\0\1\u02db\127\0\1\u02dc\111\0\1\u02dd\3\0"+
    "\1\u02dd\41\0\2\u02db\2\0\1\u02db\6\0\1\u02de\164\0"+
    "\1\u02df\3\0\1\u02df\47\0\1\u02db\203\0\1\u02db\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[48223];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\25\0\2\1\1\11\13\1\2\11\2\1\3\11\13\1"+
    "\1\11\26\1\1\11\4\1\2\11\2\1\1\11\6\1"+
    "\1\11\12\1\1\11\10\1\1\11\3\1\1\0\2\1"+
    "\1\11\2\1\2\11\2\1\1\11\1\1\1\11\1\1"+
    "\1\11\4\0\1\1\1\11\4\1\1\11\2\1\1\0"+
    "\2\1\2\0\1\1\1\0\2\1\1\0\6\1\1\11"+
    "\2\0\4\1\1\0\1\1\1\0\1\1\2\0\1\11"+
    "\2\0\2\1\1\0\53\1\13\0\2\1\1\11\3\0"+
    "\3\1\3\11\1\1\3\0\3\1\2\11\3\0\1\1"+
    "\1\0\1\11\1\0\1\11\3\0\1\1\1\0\2\1"+
    "\1\11\1\0\1\11\1\0\1\11\2\0\1\11\1\0"+
    "\1\1\1\0\1\11\1\0\2\11\2\1\1\11\2\0"+
    "\10\1\1\0\15\1\1\0\1\1\3\0\55\1\12\0"+
    "\2\1\1\11\3\1\1\0\1\11\1\0\4\11\1\1"+
    "\2\0\31\1\4\0\52\1\12\0\2\1\1\11\1\1"+
    "\1\11\1\0\26\1\1\11\1\1\3\0\42\1\10\0"+
    "\1\11\1\0\3\1\1\0\22\1\3\0\27\1\5\0"+
    "\23\1\1\11\1\1\1\0\17\1\3\0\1\1\1\0"+
    "\15\1\1\0\14\1\1\0\1\1\1\0\22\1\1\0"+
    "\1\1\1\0\12\1\1\11\1\1\1\0\5\1\1\0"+
    "\5\1\1\0\2\1\1\0\1\1\1\0\1\1\14\0"+
    "\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[735];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF = false;

  /* user code: */

    private final ByteStack stack = new ByteStack();
    private String heredoc = null;
    private int hereocLength = 0;
    private int parenBalanceInConst = 0; // for context sensitive lexer
    private int bracketBalanceInConst = 0; // for context sensitive lexer
    private boolean aspTagsAllowed;
    private boolean shortTagsAllowed;
    private boolean isInConst;
    private LexerInput input;

    public PHP5ColoringLexer(LexerRestartInfo info, boolean shortTagsAllowed, boolean aspTagsAllowed, boolean inPHP) {
        this.input = info.input();
        this.aspTagsAllowed = aspTagsAllowed;
        this.shortTagsAllowed = shortTagsAllowed;

        if (info.state() != null) {
            //reset state
            setState((LexerState) info.state());
        } else {
            //initial state
            stack.push(YYINITIAL);
            if (inPHP) {
                stack.push(ST_PHP_IN_SCRIPTING);
                zzState = ST_PHP_IN_SCRIPTING;
                zzLexicalState = ST_PHP_IN_SCRIPTING;
            } else {
                zzState = YYINITIAL;
                zzLexicalState = YYINITIAL;
            }
        }

    }

    public static final class LexerState  {
        final ByteStack stack;
        /* the current state of the DFA */
        final int zzState;
        /* the current lexical state */
        final int zzLexicalState;
        /* remember the heredoc */
        final String heredoc;
        /* and the lenght of */
        final int hereocLength;

        LexerState(ByteStack stack, int zzState, int zzLexicalState, String heredoc, int hereocLength) {
            this.stack = stack;
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
            this.heredoc = heredoc;
            this.hereocLength = hereocLength;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }

            if (obj == null || obj.getClass() != this.getClass()) {
                return false;
            }

            LexerState state = (LexerState) obj;
            return (this.stack.equals(state.stack)
                && (this.zzState == state.zzState)
                && (this.zzLexicalState == state.zzLexicalState)
                && (this.hereocLength == state.hereocLength)
                && ((this.heredoc == null && state.heredoc == null) || (this.heredoc != null && state.heredoc != null && this.heredoc.equals(state.heredoc))));
        }

        @Override
        public int hashCode() {
            int hash = 11;
            hash = 31 * hash + this.zzState;
            hash = 31 * hash + this.zzLexicalState;
            if (stack != null) {
                hash = 31 * hash + this.stack.hashCode();
            }
            hash = 31 * hash + this.hereocLength;
            if (heredoc != null) {
                hash = 31 * hash + this.heredoc.hashCode();
            }
            return hash;
        }
    }

    public LexerState getState() {
        return new LexerState(stack.copyOf(), zzState, zzLexicalState, heredoc, hereocLength);
    }

    public void setState(LexerState state) {
        this.stack.copyFrom(state.stack);
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
        this.heredoc = state.heredoc;
        this.hereocLength = state.hereocLength;
    }

    protected boolean isHeredocState(int state) {
        return state == ST_PHP_HEREDOC || state == ST_PHP_START_HEREDOC || state == ST_PHP_END_HEREDOC || state == ST_PHP_NOWDOC;
    }

    public int[] getParamenters() {
        return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline, zzLexicalState};
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    protected int getZZMarkedPos() {
        return zzMarkedPos;
    }

    protected int getZZEndRead() {
        return zzEndRead;
    }

    public char[] getZZBuffer() {
        return zzBuffer;
    }

    protected int getZZStartRead() {
        return this.zzStartRead;
    }

    protected int getZZPushBackPosition() {
        return this.zzPushbackPos;
    }

    protected void pushBack(int i) {
        yypushback(i);
    }

    protected void popState() {
        yybegin(stack.pop());
    }

    protected void pushState(final int state) {
        stack.push(getZZLexicalState());
        yybegin(state);
    }

    private boolean isLabelChar(char c) {
        return c == '_'
                || (c >= 'a' && c <= 'z')
                || (c >= 'A' && c <= 'Z')
                || (c >= 0x7f && c <= 0xff);
    }

    private boolean isEndNowdoc() {
        String yytext = yytext().trim();
        int lastIndexOfNewline = yytext.lastIndexOf('\n');
        if (lastIndexOfNewline == -1) {
            lastIndexOfNewline = yytext.lastIndexOf('\r');
        }
        if (lastIndexOfNewline != -1) {
            yytext = yytext.substring(lastIndexOfNewline);
        }
        return isEndHereOrNowdoc(yytext);
    }

    private boolean isEndHeredoc() {
        return isEndHereOrNowdoc(yytext());
    }

    private boolean isEndHereOrNowdoc(String text) {
        // check whether ID exists
        String trimedText = text.trim();
        boolean isEnd = false;
        if (trimedText.startsWith(heredoc)) {
            if (trimedText.length() == heredoc.length()) {
                isEnd = true;
            } else if (trimedText.length() > heredoc.length()
                    && !isLabelChar(trimedText.charAt(heredoc.length()))) {
                // e.g.
                // $test = <<< END
                // ENDING
                // END
                isEnd = true;
            }
        }
        return isEnd;
    }

 // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PHP5ColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PHP5ColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1772) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }



  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
     return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
    //zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public PHPTokenId nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    //int zzCurrentPosL;
    //int zzMarkedPosL;
    //int zzEndReadL = zzEndRead;
    //char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      //zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      //zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
      int tokenLength = 0;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
            zzInput = input.read();

            if(zzInput == LexerInput.EOF) {
                //end of input reached
                zzInput = YYEOF;
                break zzForAction;
                //notice: currently LexerInput.EOF == YYEOF
            }

          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 32:
          { //the difference from the original rules comes from the fact that we took ';' out out of tokens
    return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 161: break;
        case 96:
          { return PHPTokenId.PHP_FALSE;
          }
        case 162: break;
        case 26:
          { yypushback(1);
    yybegin(ST_PHP_NOWDOC);
          }
        case 163: break;
        case 35:
          { String yytext = yytext();
    switch (yytext.charAt(yytext.length() - 1)) {
        case '?':
        case '%':
            yypushback(1);
            break;
        default:
            popState();
    }
     return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 164: break;
        case 77:
          { yypushback(2);
        return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 165: break;
        case 5:
          { if(isInConst) {
        // for checking arrays
        // e.g. const CONST = [1, 2], const GOTO = 1;
        String text = yytext();
        switch (text) {
            case "[":
                bracketBalanceInConst++;
                break;
            case "]":
                bracketBalanceInConst--;
                break;
            case "(":
                parenBalanceInConst++;
                break;
            case ")":
                parenBalanceInConst--;
                break;
            default:
                break;
        }
    }
    return PHPTokenId.PHP_TOKEN;
          }
        case 166: break;
        case 64:
          { popState();
    return PHPTokenId.PHPDOC_COMMENT_END;
          }
        case 167: break;
        case 132:
          { return PHPTokenId.PHP_INCLUDE;
          }
        case 168: break;
        case 151:
          { return PHPTokenId.PHP_ENDDECLARE;
          }
        case 169: break;
        case 37:
          { return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 170: break;
        case 59:
          { /* <ST_PHP_NOWDOC>{NEWLINE}{TABS_AND_SPACES}{LABEL}";"?[^\n\r]*[\r\n]? */
        if (isEndNowdoc()) {
            String yytext = yytext();
            int trailingNewlineOffset = (yytext.endsWith("\n") || yytext.endsWith("\r")) ? 2 : 0;
            int lastIndexOfNewline = yytext.lastIndexOf('\n', yylength() - trailingNewlineOffset);
            if (lastIndexOfNewline == -1) {
                lastIndexOfNewline = yytext.lastIndexOf('\r', yylength() - trailingNewlineOffset);
            }
            int back = yylength() - lastIndexOfNewline - 1; // -1 [\r\n] length
            yypushback(back);
            yybegin(ST_PHP_END_NOWDOC);
            return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
        } else {
            yypushback(1); // [\r\n] length
        }
          }
        case 171: break;
        case 121:
          { return PHPTokenId.PHP_GLOBAL;
          }
        case 172: break;
        case 155:
          { return PHPTokenId.PHP__FUNCTION__;
          }
        case 173: break;
        case 18:
          { popState();
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 174: break;
        case 41:
          { if (shortTagsAllowed ) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_OPENTAG;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 175: break;
        case 55:
          { yypushback(1);
    pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_CURLY_OPEN;
          }
        case 176: break;
        case 117:
          { return PHPTokenId.PHP_TYPE_OBJECT;
          }
        case 177: break;
        case 87:
          { return PHPTokenId.PHP_LIST;
          }
        case 178: break;
        case 95:
          { return PHPTokenId.PHP_EMPTY;
          }
        case 179: break;
        case 15:
          { pushState(ST_PHP_LINE_COMMENT);
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 180: break;
        case 92:
          { return PHPTokenId.PHP_CASE;
          }
        case 181: break;
        case 43:
          { return PHPTokenId.PHP_VARIABLE;
          }
        case 182: break;
        case 46:
          { //popState();
        yybegin(YYINITIAL);
        if (yylength() > 2) {
            yypushback(yylength()-2);
        }
        stack.clear();
    return PHPTokenId.PHP_CLOSETAG;
          }
        case 183: break;
        case 23:
          { int trailingNewLineLength = 1;
        int label_len = yylength() - trailingNewLineLength;
        int back = trailingNewLineLength;

        if (yytext().charAt(label_len - 1)==';') {
           label_len--;
           back++;
        }

        if (isEndHeredoc()) {
            int indexOfHeredocId = yytext().indexOf(heredoc);
            back += label_len - indexOfHeredocId;
            yypushback(back);
            yybegin(ST_PHP_END_HEREDOC);
        } else {
            yypushback(yylength() - trailingNewLineLength);
            yybegin(ST_PHP_HEREDOC);
        }
          }
        case 184: break;
        case 8:
          { if(isInConst) {
        isInConst = false;
        parenBalanceInConst = 0;
        bracketBalanceInConst = 0;
    }
    return PHPTokenId.PHP_SEMICOLON;
          }
        case 185: break;
        case 45:
          { if (aspTagsAllowed) {
            yybegin(YYINITIAL);
            stack.clear();
        return PHPTokenId.PHP_CLOSETAG;
    }
    return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 186: break;
        case 36:
          { return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 187: break;
        case 84:
          { pushState(ST_PHP_DOC_COMMENT);
    yypushback(yylength()-3);
    return PHPTokenId.PHPDOC_COMMENT_START;
          }
        case 188: break;
        case 101:
          { return PHPTokenId.PHP_ISSET;
          }
        case 189: break;
        case 134:
          { return PHPTokenId.PHP__FILE__;
          }
        case 190: break;
        case 50:
          { return PHPTokenId.PHP_IF;
          }
        case 191: break;
        case 56:
          { popState();
    pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 192: break;
        case 66:
          { if (aspTagsAllowed) {
            yybegin(YYINITIAL);
            stack.clear();
        return PHPTokenId.PHP_CLOSETAG;
    }
    String text = yytext();
    if(text.indexOf('\r') != -1 || text.indexOf('\n') != -1 ){
        popState();
    }
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 193: break;
        case 48:
          { return PHPTokenId.PHP_AS;
          }
        case 194: break;
        case 24:
          { heredoc=null;
    hereocLength=0;
    yybegin(ST_PHP_IN_SCRIPTING);
    int back = 0;
    // mark just the label
    if (yytext().charAt(yylength() - 1)==';') {
        back++;
    }
    yypushback(back);
    return PHPTokenId.PHP_HEREDOC_TAG_END;
          }
        case 195: break;
        case 159:
          { pushState(ST_HALTED_COMPILER);
    return PHPTokenId.PHP_HALT_COMPILER;
          }
        case 196: break;
        case 74:
          { return PHPTokenId.PHP_USE;
          }
        case 197: break;
        case 104:
          { return PHPTokenId.PHP_TYPE_FLOAT;
          }
        case 198: break;
        case 158:
          { return PHPTokenId.PHP__NAMESPACE__;
          }
        case 199: break;
        case 65:
          { popState();
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 200: break;
        case 157:
          { return PHPTokenId.PHP_INCLUDE_ONCE;
          }
        case 201: break;
        case 145:
          { return PHPTokenId.PHP_NAMESPACE;
          }
        case 202: break;
        case 13:
          { if (isInConst) {
        pushState(ST_PHP_LOOKING_FOR_CONSTANT_NAME);
    }
    return PHPTokenId.PHP_TOKEN;
          }
        case 203: break;
        case 63:
          { popState();
    return PHPTokenId.PHP_COMMENT_END;
          }
        case 204: break;
        case 139:
          { return PHPTokenId.PHP_ITERABLE;
          }
        case 205: break;
        case 99:
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
    int startString=3+bprefix;
    hereocLength = yylength()-bprefix-3-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
    while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
        startString++;
        hereocLength--;
    }
    // HEREDOC PHP 5.3
    if (yytext().charAt(startString) == '"') {
        hereocLength -= 2;
        startString ++;
    }
    heredoc = yytext().substring(startString,hereocLength+startString);
    yybegin(ST_PHP_START_HEREDOC);
    return PHPTokenId.PHP_HEREDOC_TAG_START;
          }
        case 206: break;
        case 62:
          { // const keyword is also used within group uses. so check "=", otherwise it matches the following:
    // use A\{const CONSTANTA, function myFunction,...}
    popState();
    String match = yytext();
    String[] segments = match.split("[ \n\r\t]+");
    int back = 1;
    if(segments.length > 1) {
        int wsLength = yylength() - 1 - segments[0].length(); // - "=" - {LABEL}
        back +=  wsLength;
    }
    yypushback(back);
    return PHPTokenId.PHP_STRING;
          }
        case 207: break;
        case 39:
          { popState();
    return PHPTokenId.T_INLINE_HTML;
          }
        case 208: break;
        case 6:
          { return PHPTokenId.PHP_OPERATOR;
          }
        case 209: break;
        case 11:
          { pushState(ST_PHP_BACKQUOTE);
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 210: break;
        case 52:
          { pushState(ST_PHP_QUOTES_AFTER_VARIABLE);
    return PHPTokenId.PHP_VARIABLE;
          }
        case 211: break;
        case 3:
          { return PHPTokenId.PHP_NUMBER;
          }
        case 212: break;
        case 75:
          { yypushback(1);
    pushState(ST_PHP_VAR_OFFSET);
    return PHPTokenId.PHP_VARIABLE;
          }
        case 213: break;
        case 129:
          { return PHPTokenId.PHP_REQUIRE;
          }
        case 214: break;
        case 131:
          { return PHPTokenId.PHP_DECLARE;
          }
        case 215: break;
        case 107:
          { return PHPTokenId.PHP_CLONE;
          }
        case 216: break;
        case 102:
          { return PHPTokenId.PHP_TRAIT;
          }
        case 217: break;
        case 54:
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_TOKEN;
          }
        case 218: break;
        case 69:
          { return PHPTokenId.PHP_NEW;
          }
        case 219: break;
        case 78:
          { yypushback(2);
    return PHPTokenId.PHP_COMMENT;
          }
        case 220: break;
        case 61:
          { return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 221: break;
        case 19:
          { yypushback(1);
        popState();
          }
        case 222: break;
        case 125:
          { return PHPTokenId.PHP_EXTENDS;
          }
        case 223: break;
        case 85:
          { return PHPTokenId.PHP_NULL;
          }
        case 224: break;
        case 93:
          { pushState(ST_PHP_IN_SCRIPTING);
    //yybegin(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_OPENTAG;
    //return createSymbol(ASTSymbol.T_OPEN_TAG);
          }
        case 225: break;
        case 113:
          { return PHPTokenId.PHP_WHILE;
          }
        case 226: break;
        case 144:
          { return PHPTokenId.PHP_ENDSWITCH;
          }
        case 227: break;
        case 133:
          { return PHPTokenId.PHP_PRIVATE;
          }
        case 228: break;
        case 1:
          { return PHPTokenId.T_INLINE_HTML;
          }
        case 229: break;
        case 154:
          { return PHPTokenId.PHP_YIELD_FROM;
          }
        case 230: break;
        case 94:
          { return PHPTokenId.PHP_ENDIF;
          }
        case 231: break;
        case 33:
          { yypushback(1);
    popState();
        if (yylength() > 0)
            return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 232: break;
        case 118:
          { return PHPTokenId.PHP_STATIC;
          }
        case 233: break;
        case 130:
          { return PHPTokenId.PHP_DEFAULT;
          }
        case 234: break;
        case 17:
          { return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 235: break;
        case 30:
          { popState();
    return PHPTokenId.PHP_TOKEN;
          }
        case 236: break;
        case 42:
          { pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 237: break;
        case 135:
          { return PHPTokenId.PHP__LINE__;
          }
        case 238: break;
        case 80:
          { return PHPTokenId.PHP_EXIT;
          }
        case 239: break;
        case 40:
          { if (aspTagsAllowed) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_OPENTAG;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 240: break;
        case 44:
          { pushState(ST_PHP_COMMENT);
    return PHPTokenId.PHP_COMMENT_START;
          }
        case 241: break;
        case 98:
          { return PHPTokenId.PHP_BREAK;
          }
        case 242: break;
        case 31:
          { if(parenBalanceInConst == 0 && bracketBalanceInConst == 0) {
        isInConst = false;
    }
    yypushback(1);
    popState();
          }
        case 243: break;
        case 22:
          { yypushback(1);
        yybegin(ST_PHP_HEREDOC);
          }
        case 244: break;
        case 147:
          { return PHPTokenId.PHP_INSTEADOF;
          }
        case 245: break;
        case 25:
          { /* <ST_PHP_NOWDOC>{NOWDOC_CHARS}|{NEWLINE} */
        // retrun PHPTokenId when the closing marker is found
          }
        case 246: break;
        case 148:
          { return PHPTokenId.PHP_PROTECTED;
          }
        case 247: break;
        case 67:
          { String text = yytext();
    if ((text.charAt(1)=='%' && aspTagsAllowed)
        || (text.charAt(1)=='?')) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.T_OPEN_TAG_WITH_ECHO;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 248: break;
        case 109:
          { return PHPTokenId.PHP_PRINT;
          }
        case 249: break;
        case 73:
          { return PHPTokenId.PHP_VAR;
          }
        case 250: break;
        case 160:
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.T_INLINE_HTML;
          }
        case 251: break;
        case 103:
          { return PHPTokenId.PHP_THROW;
          }
        case 252: break;
        case 122:
          { return PHPTokenId.PHP_PARENT;
          }
        case 253: break;
        case 120:
          { return PHPTokenId.PHP_SWITCH;
          }
        case 254: break;
        case 79:
          { yypushback(2); // go back to mark end of comment in the next token
        return PHPTokenId.PHPDOC_COMMENT;
          }
        case 255: break;
        case 71:
          { return PHPTokenId.PHP_TYPE_INT;
          }
        case 256: break;
        case 111:
          { return PHPTokenId.PHP_CASTING;
          }
        case 257: break;
        case 47:
          { return PHPTokenId.PHP_TEXTUAL_OPERATOR;
          }
        case 258: break;
        case 38:
          { popState();return PHPTokenId.WHITESPACE;
          }
        case 259: break;
        case 70:
          { return PHPTokenId.PHP_DIE;
          }
        case 260: break;
        case 143:
          { return PHPTokenId.PHP__CLASS__;
          }
        case 261: break;
        case 2:
          { yypushback(1);
    pushState(ST_PHP_HIGHLIGHTING_ERROR);
          }
        case 262: break;
        case 108:
          { return PHPTokenId.PHP_CLASS;
          }
        case 263: break;
        case 127:
          { return PHPTokenId.PHP_FINALLY;
          }
        case 264: break;
        case 146:
          { return PHPTokenId.PHP_INTERFACE;
          }
        case 265: break;
        case 142:
          { return PHPTokenId.PHP__TRAIT__;
          }
        case 266: break;
        case 110:
          { return PHPTokenId.PHP_UNSET;
          }
        case 267: break;
        case 12:
          { return PHPTokenId.PHP_CURLY_OPEN;
          }
        case 268: break;
        case 28:
          { yypushback(1);
    popState();
          }
        case 269: break;
        case 123:
          { return PHPTokenId.PHP_PUBLIC;
          }
        case 270: break;
        case 21:
          { int indexOfNewline = yytext().indexOf("\r");
        if (indexOfNewline == -1) {
            indexOfNewline = yytext().indexOf("\n");
        }
        if (indexOfNewline > 0) {
            // if index equals 0, don't pushback (infinite loop)
            yypushback(yylength() - indexOfNewline);
        }
        return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 271: break;
        case 156:
          { return PHPTokenId.PHP_REQUIRE_ONCE;
          }
        case 272: break;
        case 150:
          { return PHPTokenId.PHP_ENDFOREACH;
          }
        case 273: break;
        case 119:
          { return PHPTokenId.PHP_TYPE_STRING;
          }
        case 274: break;
        case 82:
          { return PHPTokenId.PHP_EVAL;
          }
        case 275: break;
        case 89:
          { return PHPTokenId.PHP_GOTO;
          }
        case 276: break;
        case 105:
          { isInConst = true;
    parenBalanceInConst = 0;
    bracketBalanceInConst = 0;
    pushState(ST_PHP_LOOKING_FOR_CONSTANT_NAME);
    return PHPTokenId.PHP_CONST;
          }
        case 277: break;
        case 20:
          { popState();
        return PHPTokenId.PHP_STRING;
          }
        case 278: break;
        case 138:
          { return PHPTokenId.PHP_ABSTRACT;
          }
        case 279: break;
        case 27:
          { heredoc=null; hereocLength=0;
    yybegin(ST_PHP_IN_SCRIPTING);
    int back = 0;
    // mark just the label
    if (yytext().charAt(yylength() - 1)==';') {
        back++;
    }
    yypushback(back);
    return PHPTokenId.PHP_NOWDOC_TAG_END;
          }
        case 280: break;
        case 9:
          { pushState(ST_PHP_DOUBLE_QUOTES);
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 281: break;
        case 60:
          { /* <ST_START_NOWDOC>{TABS_AND_SPACES}{LABEL}";"?[^\n\r]*[\r\n]? */
    // there is no [\r\n] if it is the last line
    // i.e. not [\r\n] but EOF, so check not [\r\n] but [\r\n]?
    if (isEndNowdoc()) {
        int indexOfNowdocId = yytext().indexOf(heredoc);
        int back = yylength() - indexOfNowdocId - heredoc.length();
        yypushback(back);
        heredoc=null;
        hereocLength=0;
        yybegin(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_NOWDOC_TAG_END;
    } else {
        yypushback(1);
        yybegin(ST_PHP_NOWDOC);
    }
          }
        case 282: break;
        case 83:
          { return PHPTokenId.PHP_ECHO;
          }
        case 283: break;
        case 97:
          { return PHPTokenId.PHP_FINAL;
          }
        case 284: break;
        case 149:
          { return PHPTokenId.PHP__METHOD__;
          }
        case 285: break;
        case 10:
          { return PHPTokenId.PHP_NS_SEPARATOR;
          }
        case 286: break;
        case 112:
          { return PHPTokenId.PHP_YIELD;
          }
        case 287: break;
        case 137:
          { pushState(ST_PHP_LOOKING_FOR_FUNCTION_NAME);
    return PHPTokenId.PHP_FUNCTION;
          }
        case 288: break;
        case 124:
          { return PHPTokenId.PHP__DIR__;
          }
        case 289: break;
        case 4:
          { return  PHPTokenId.PHP_STRING;
          }
        case 290: break;
        case 140:
          { return PHPTokenId.PHP_CONTINUE;
          }
        case 291: break;
        case 58:
          { /* {NEWLINE}{TABS_AND_SPACES}{LABEL}";"?[^\n\r]*[\n\r]? */
        int trailingNewLineLength = 1;
        if (isEndHeredoc()) {
            String yytext = yytext();
            int newlineLength = yytext.startsWith("\r\n") ? 2 : 1;
            int back = yylength() - newlineLength;
            yypushback(back);
            yybegin(ST_PHP_END_HEREDOC);
        } else {
            // handle variable
            char previousChar = ' ';
            int indexOfVariable = -1;
            for (int i = 0; i < yylength(); i++) {
                char currentChar = yytext().charAt(i);
                if (currentChar == '$' && previousChar == '{') {
                    indexOfVariable = i - 1;
                    break;
                }
                if (currentChar == '$' && previousChar != '\\') {
                    indexOfVariable = i;
                    break;
                }
                previousChar = currentChar;
            }

            if (indexOfVariable == -1) {
                yypushback(trailingNewLineLength);
            } else {
                yypushback(yylength() - indexOfVariable);
                return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
            }
        }
        return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 292: break;
        case 153:
          { return PHPTokenId.PHP_IMPLEMENTS;
          }
        case 293: break;
        case 72:
          { return PHPTokenId.PHP_TRY;
          }
        case 294: break;
        case 100:
          { return PHPTokenId.PHP_ARRAY;
          }
        case 295: break;
        case 7:
          { return PHPTokenId.WHITESPACE;
          }
        case 296: break;
        case 116:
          { return PHPTokenId.PHP_RETURN;
          }
        case 297: break;
        case 34:
          { return PHPTokenId.PHP_TOKEN;
          }
        case 298: break;
        case 16:
          { return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 299: break;
        case 106:
          { return PHPTokenId.PHP_CATCH;
          }
        case 300: break;
        case 76:
          { String text = yytext();
        int lastIndexOfDollar = text.lastIndexOf('$');
        yypushback(text.length() - lastIndexOfDollar);
        return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 301: break;
        case 57:
          { return PHPTokenId.PHP_PAAMAYIM_NEKUDOTAYIM;
          }
        case 302: break;
        case 141:
          { return PHPTokenId.PHP_CALLABLE;
          }
        case 303: break;
        case 152:
          { return PHPTokenId.PHP_INSTANCEOF;
          }
        case 304: break;
        case 128:
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
        int startString=3+bprefix;
        /* 3 is <<<, 2 is quotes, 1 is newline */
        hereocLength = yylength()-bprefix-3-2-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
        while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
            startString++;
            hereocLength--;
        }
        // first quate
        startString++;
        heredoc = yytext().substring(startString, hereocLength+startString);
        yybegin(ST_PHP_START_NOWDOC);
        return PHPTokenId.PHP_NOWDOC_TAG_START;
          }
        case 305: break;
        case 90:
          { return PHPTokenId.PHP_TYPE_BOOL;
          }
        case 306: break;
        case 114:
          { return PHPTokenId.PHP_ENDFOR;
          }
        case 307: break;
        case 68:
          { return PHPTokenId.PHP_FOR;
          }
        case 308: break;
        case 126:
          { return PHPTokenId.PHP_FOREACH;
          }
        case 309: break;
        case 51:
          { pushState(ST_PHP_LOOKING_FOR_STATIC_PROPERTY);
    return PHPTokenId.PHP_PAAMAYIM_NEKUDOTAYIM;
          }
        case 310: break;
        case 29:
          { popState();
    return PHPTokenId.PHP_STRING;
          }
        case 311: break;
        case 81:
          { return PHPTokenId.PHP_ELSE;
          }
        case 312: break;
        case 88:
          { return PHPTokenId.PHP_SELF;
          }
        case 313: break;
        case 53:
          { yypushback(1);
    return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 314: break;
        case 14:
          { int lastState = stack.peek();
    if (lastState != ST_PHP_IN_SCRIPTING && lastState != YYINITIAL) {
        // probably in some sub state -> "{$" or "${"
        popState();
    }
    return PHPTokenId.PHP_CURLY_CLOSE;
          }
        case 315: break;
        case 49:
          { return PHPTokenId.PHP_DO;
          }
        case 316: break;
        case 91:
          { return PHPTokenId.PHP_TYPE_VOID;
          }
        case 317: break;
        case 136:
          { return PHPTokenId.PHP_ENDWHILE;
          }
        case 318: break;
        case 115:
          { return PHPTokenId.PHP_ELSEIF;
          }
        case 319: break;
        case 86:
          { return PHPTokenId.PHP_TRUE;
          }
        case 320: break;
        default:
          if (zzInput == YYEOF)
            //zzAtEOF = true;
            switch (zzLexicalState) {
            case ST_PHP_COMMENT: {
              if (input.readLength() > 0) {
                input.backup(1);  // backup eof
                return PHPTokenId.PHP_COMMENT;
              }
              else {
                  return null;
              }
            }
            case 736: break;
            case ST_PHP_DOC_COMMENT: {
              if (input.readLength() > 0) {
                    input.backup(1);  // backup eof
                    return PHPTokenId.PHPDOC_COMMENT;
                }
                else {
                    return null;
                }
            }
            case 737: break;
            default:
              {        if(input.readLength() > 0) {
            // backup eof
            input.backup(1);
            //and return the text as error token
            return PHPTokenId.UNKNOWN_TOKEN;
        } else {
            return null;
        }
 }
            }

          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
