# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# definition of tokens
TOKEN:keyword:( "select" | "from" | " where" | "group by" | "order by" | "inner" | "join" | "outer" | "left" | "right" | "as" | "full" | "with" | "fetch" | "all" | "distinct" | "properties" | "new" | "is" | "null" | "empty" | "member" | "of" | "case" | "when" | "else" | "then" | "end" )
TOKEN:operator:( "{" | "}" | "(" | ")" | "+" | "-" | "*" | "/" | "=" | ">" | "<" | ">=" | "<=" | "<>" | "!=" | "||" | "concat" | "like" | "and" | "or" | "not" | "in" | "max" | "min" | "avg" | "sum" | "count" | "index" | "str")
TOKEN:identifier:( ["A"-"Z"]* ["."]* ["a"-"z" "0"-"9"]* )
TOKEN:whitespace:( [" " "\t" "\n" "\r"]+ )

# parser should ignore whitespaces
SKIP:whitespace

# definition of grammar
#S = (Statement)*;
#Statement = WhileStatement | IfStatement | ExpressionStatement;
#WhileStatement = "while" "(" ConditionalExpression ")" Block;
#IfStatement = "if" "(" ConditionalExpression ")" Block ["else" Block];
#Block = "{" (Statement)* "}";
#ConditionalExpression = <identifier>;
#ExpressionStatement = <identifier>;

# code folding
#FOLD:Block

COLOR:keyword: {
    foreground_color:"blue";
    font_type:"bold";
}

COLOR:operator : {
    foreground_color:"green";
    font_type:"bold";
}

# navigator support
#NAVIGATOR:WhileStatement: {
#    display_name: "$ConditionalExpression$";
#}

# brace completion
COMPLETE "{:}"
COMPLETE "(:)"

# brace matching
BRACE "{:}"
BRACE "(:)"

# indentation support
INDENT "{:}"
INDENT "(:)"
#INDENT "\\s*(((if|while)\\s*\\(|else\\s*|else\\s+if\\s*\\(|for\\s*\\(.*\\))[^{;]*)"


# code completion
#COMPLETION:keyword, operator, identifier, whitespace: {
#    text1:"select";
#    text2:"from";
##    text3:"where";
#}



